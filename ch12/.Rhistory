tzones
View(tzones)
tzones[name]
View(tzones)
tzones[{"name"]
tzones["name"]
tzones["name" = "America/Los_Angeles"]
tzones["name" == "America/Los_Angeles"]
tzones[, 3]
tzones[, "name"]
tzones[, 3]
subset(tzones, name = "America/Los_Angeles")
subset(tzones, "name" = "America/Los_Angeles")
subset(tzones, "America/Los_Angeles", "name")
subset(tzones, name = "America/Los_Angeles", "name")
subset(tzones, name = "America/Los_Angeles", "name")
subset(tzones, name == "America/Los_Angeles", "name")
subset(tzones, name == "America/Los_Angeles", )
subset(tzones, name == "America/Los_Angeles")
# POSIX dates and times
(now_ct <- Sys.time())
(now_lt <- as.POSIXlt(now_ct))
## formatting dates
# strftime()
strftime(now_ct, "It's %I:%M%p on %A %d %B, %Y.")
strftime(now_ct, "It's %H:%M%p on %A %d %m, %Y.")
# E11-3
zodiac <- function(inputDate){
month <- strftime(inputDate, "%m")
day <- strftime(inputDate, "%d" )
print(month)
print(day)
}
zodiac(now_ct)
zodiac(now_ct)
# E11-3
zodiac <- function(inputDate){
# E11-3
zodiac <- function(inputDate){
# E11-3
zodiac <- function(inputDate){
month <- strftime(inputDate, "%m")
day <- strftime(inputDate, "%d" )
#print(month)
#print(day)
if (month == 04) {
if (day < 20) {sign <- "Aries"} else {sign <- "Taurus"}
}
if (month == 05){
if (day < 21) {sign <- "Taurus"} else {sign <- "Gemini"}
}
if (month == 06){
if (day < 21) {sign <- "Gemini"} else { sign <- "Cancer"}
}
if (mont == 07) {
if (day < 23) {sign <- "Cancer"} else { sign <- "Leo"}
}
print(sign)}
zodiac(now_ct)
# E11-3
zodiac <- function(inputDate){
month <- strftime(inputDate, "%m")
day <- strftime(inputDate, "%d" )
#print(month)
#print(day)
if (month == 04) {
if (day < 20) {sign <- "Aries"} else {sign <- "Taurus"}
}
if (month == 05){
if (day < 21) {sign <- "Taurus"} else {sign <- "Gemini"}
}
if (month == 06){
if (day < 21) {sign <- "Gemini"} else { sign <- "Cancer"}
}
if (month == 07) {
if (day < 23) {sign <- "Cancer"} else { sign <- "Leo"}
}
print(sign)}
zodiac(now_ct)
# E11-3
zodiac <- function(inputDate){
month <- as.numeric(strftime(inputDate, "%m"))
day <- as.numeric(strftime(inputDate, "%d" ))
#print(month)
#print(day)
if (month == 04) {
if (day < 20) {sign <- "Aries"} else {sign <- "Taurus"}
}
if (month == 05){
if (day < 21) {sign <- "Taurus"} else {sign <- "Gemini"}
}
if (month == 06){
if (day < 21) {sign <- "Gemini"} else { sign <- "Cancer"}
}
if (month == 07) {
if (day < 23) {sign <- "Cancer"} else { sign <- "Leo"}
}
print(sign)}
zodiac(now_ct)
nicolaus_copernicus_birth_date <- as.Date("1473-02-19")
zodiac(nicolaus_copernicus_birth_date)
today <- Sys.Date()
zodiac(today)
nicolaus_copernicus_birth_date
today
zodiac(nicolaus_copernicus_birth_date)
nicolaus_copernicus_birth_date <- as.Date("1473-02-19")
nicolaus_copernicus_birth_date
zodiac(nicolaus_copernicus_birth_date)
# E11-3
zodiac <- function(inputDate){
month <- as.numeric(strftime(inputDate, "%m"))
day <- as.numeric(strftime(inputDate, "%d" ))
print(month)
print(day)
if (month == 04) {
if (day < 20) {sign <- "Aries"} else {sign <- "Taurus"}
}
if (month == 05){
if (day < 21) {sign <- "Taurus"} else {sign <- "Gemini"}
}
if (month == 06){
if (day < 21) {sign <- "Gemini"} else { sign <- "Cancer"}
}
if (month == 07) {
if (day < 23) {sign <- "Cancer"} else { sign <- "Leo"}
}
if (month == 08) {
if (day < 23) {sign <- "Leo"} else { sign <- "Virgo"}
}
if (month == 09) {
if (day < 23) {sign <- "Virgo"} else { sign <- "Libra"}
}
if (month == 10) {
if (day < 23) {sign <- "Libra"} else { sign <- "Scorpio"}
}
if (month == 11) {
if (day < 22) {sign <- "Scorpio"} else { sign <- "Sagittarius"}
}
if (month == 12) {
if (day < 22) {sign <- "Saggitarius"} else { sign <- "Capricorn"}
}
if (month == 01) {
if (day < 20) {sign <- "Capricorn"} else { sign <- "Aquarius"}
}
if (month == 02) {
if (day < 19) {sign <- "Aquarius"} else { sign <- "Pisces"}
}
if (month == 03) {
if (day < 21) {sign <- "Pisces"} else { sign <- "Aries"}
}
print(sign)
}
today <- Sys.Date()
today
zodiac(today)
nicolaus_copernicus_birth_date <- as.Date("1473-02-19")
nicolaus_copernicus_birth_date
zodiac(nicolaus_copernicus_birth_date)
# Build in dataset in R
data()
data(package = .packages(TRUE))
# access the data, arguments = 1, name of dataset, 2, name of package
data("kidney", package = "survival")
head(kidney)
kidney
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
library(learningr)
install.packages(learningr)
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
install.packages(learningr)
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
installed.packages(learningr)
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
installed.packages("learningr")
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
install.packages("learningr")
library(learningr)
library(learningr)
deer_file <- system.file("extdata", "RedDeerEndocranialVolume.dlm",
package =  "learningr")
deer_data <- read.table(deer_file, header = TRUE, fill = TRUE)
str(deer_data, vec.len = 1)
head(deer_data)
# e.g. crab data
crab_file <- system.file("extdata", "crabtag.csv", package = "learningr")
(crab_id_block <- read.csv(
crab_file,
header = FALSE,
skip = 3,
nrow = 2
))
(crab_tag_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 8,
nrow = 5
))
(crab_lifetime_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 15,
nrow = 3
))
# test read file
testFile <- system.file("C:/Users/Skuller/R/LearningR/ch12/ch12.r")
testData <- read.table(testFile, header = TRUE, fill = TRUE)
# test read file
testFile <- system.file("C:/Users/Skuller/R/LearningR/ch11/ch11.r")
testData <- read(testFile)
testData <- read.csv(testFile)
# coClasses is optional, helping to set data type.
bike_data <- read.xlsx2(
bike_file,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
# 1, Build in dataset in R
data()
data(package = .packages(TRUE))
# access the data, arguments = 1, name of dataset, 2, name of package
data("kidney", package = "survival")
head(kidney)
kidney
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
# e.g. Deer skull data
install.packages("learningr")
library(learningr)
deer_file <- system.file("extdata", "RedDeerEndocranialVolume.dlm",
package =  "learningr")
deer_data <- read.table(deer_file, header = TRUE, fill = TRUE)
str(deer_data, vec.len = 1)
head(deer_data)
# test read file
testFile <- system.file("Z:/R/LearningR/ch11/ch11.r")
testData <- read.table(testFile)
# e.g. crab data
crab_file <- system.file("extdata", "crabtag.csv", package = "learningr")
# notice arguments: skip and nrow.
(crab_id_block <- read.csv(
crab_file,
header = FALSE,
skip = 3,
nrow = 2
))
(crab_tag_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 8,
nrow = 5
))
(crab_lifetime_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 15,
nrow = 3
))
# write file
write.csv(
crab_lifetime_notebook, "Z:/R/crab_lifetime_data.csv",
row.names = FALSE,
fileEncoding = "utf8"
)
# 2.2 Unstructured text files
text_file <- system.file(
"extdata",
"Shakespeare.s.The.Tempest..from.Project.Gutenberg.pg2235.txt",
package = "learningr"
)
text_file
the_tempest <- readLines(text_file)
the_tempest
the_tempest[1926:1927]
# 2.3 XML and HTML files
install.packages("XML")
library(XML)
the_tempest <- readLines(text_file)
the_tempest
the_tempest[1926:1927]
# using internal nodes
xml_file <- system.file("extdata", "options.xml", package = "learningr")
xml_file
r_options <- xmlParse(xml_file)
r_options
# using R nodes
xmlParse(xml_file, useInternalNodes = FALSE)
xmlTreeParse(xml_file)
# serializing objects
install.packages("Runiversal")
library(Runiversal)
ops <- as.list(options())
cat(makexml(ops), file = "options.xml")
# 3. JSON and YAML files
install.packages("RJSONIO")
install.packages("rjson")
library(RJSONIO)
library(rjson)
jamaican_city_file <- system.file(
"extdata",
"Jamaican.Cities.json",
package = "learningr"
)
jamaican_city_file
# :: define from which pkg the function should be used
(jamaican_cities_RJSONIO <- RJSONIO::fromJSON(jamaican_city_file))
(jamaican_cities_rjson <- rjson::fromJSON(file = jamaican_city_file))
# 2 pkg deal with NaN and NA
special_numbers <- c(NaN, NA, Inf, -Inf)
# RJSONIO turn NaN and NA to null
RJSONIO::toJSON(special_numbers)
# rjson turn everything to string
rjson::toJSON(special_numbers)
# YAML package
library(yaml)
yaml.load_file(jamaican_city_file)
# 4. Read binary file
# Excel file
install.packages("xlsx")
library(xlsx)
bike_file <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bike_file
# coClasses is optional, helping to set data type.
bike_data <- read.xlsx2(
bike_file,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bike_data)
# Other file types reading
install.packages(foreign)
# Other file types reading
library(foreign)
library(matlab)
# Web Data
install.packages("MDI")
library(MDI)
# Web Data
install.packages("WDI")
library(WDI)
wdi_datasets <- WDIsearch()
head(wdi_datasets)
wdi_trade_in_services <- WDI(
indicator = "BG.GSR.NFSV.GD.ZS"
)
str(wdi_trade_in_services)
# quantmod for stock tickers
library(quantmod)
# quantmod for stock tickers
install.packages(quantmod)
# quantmod for stock tickers
install.packages("quantmod")
library(quantmod)
options(getSymbols.auto.assign = FALSE)
microsoft <- getSymbols("MSFT")
head(miscrosoft)
options(getSymbols.auto.assign = TRUE)
microsoft <- getSymbols("MSFT")
head(miscrosoft)
head(microsoft)
options(getSymbols.auto.assign = FALSE)
microsoft <- getSymbols("MSFT")
head(microsoft)
# scraping web pages
salary_url <- "http://www.justinmrao.com/salary_data.csv"
salary_data <- read.csv(salary_url)
str(salary_data)
salary_data
setwd("C:/Users/Skuller/R/LearningR/ch12")
local_copy <- "my local copy.csv"
download.file(salary_url, local_copy)
salary_data <- read.csv(local_copy)
salary_data
# using RCurl pkg for data inside the HTML and XML
library(RCurl)
# using RCurl pkg for data inside the HTML and XML
install.packages("RCurl")
library(RCurl)
time_url <- "http://tycho.usno.navy.mil/cgi-bin/timer.pl"
time_page <- getURL(time_url)
cat(time_page)
time_doc <- htmlParse(time_page)
pre <- xpathSApply(time_doc, "//pre")[[1]]
values <- strsplit(xmlValue(pre), "\n")[[1]][-1]
strsplit(values, "\t+")
time_doc
pre
values
strsplit(values, "\t+")
# httr pkg
library(httr)
time_page <- GET(time_url)
time_doc <- content(page, useInternalNodes = TRUE)
time_doc
time_page
time_doc <- content(page, useInternalNodes = TRUE)
time_doc
time_doc <- ""
time_doc
time_doc <- content(page, useInternalNodes = TRUE)
time_doc
# 6. Accessing database
library(DBI)
library(RSQLite)
# 6. Accessing database
install.packages("DBI")
installed.packages("RSQLite")
library(DBI)
library(RSQLite)
installed.packages("RSQLite")
install.packages("RSQLite")
# define a database driver, type is "SQLite"
driver <- dbDriver("SQLite")
# 6. Accessing database
# SQLite database
# need 2 pkg
install.packages("DBI")
install.packages("DBI")
library(DBI)
library(RSQLite)
# define a database driver, type is "SQLite"
driver <- dbDriver("SQLite")
# connect to database (file?)
db_file <- system.file(
"extdata",
"crabtag.sqlite",
package = "learningr"
)
# connect the database driver and database file
conn <- dbConnect(driver, db_file)
# MySQL
driver <- dbDriver("MySQL")
# MySQL
install.packages("RMySQL")
library(RMySQL)
driver <- dbDriver("MySQL")
db_file <- "path/to/MySQL/database"
conn <- dbConnect(driver, db_file)
query <- "SELECT * FROM IdBlock"
(id_block <- dbGetQuery(conn, query))
dbDisconnect(conn)
dbUnloadDriver(driver)
# close the connection
dbDisconnect(conn)
query_crab_tag_db("SELECT * FROM IdBlock")
# to ensure close the connection, wrap into a function and use "on.exit"
query_crab_tag_db <- function(query)
{
driver <- dbDriver("SQLite")
db_file <- system.file(
"extdata",
"crabtag.sqlite",
package = "learningr"
)
conn <- dbConnect(driver, db_file)
on.exit(
{
#this code block runs at the end of the function,
#even if an error is thrown
dbDisconnect(conn)
dbUnloadDriver(driver)
}
)
dbGetQuery(conn, query)
}
query_crab_tag_db("SELECT * FROM IdBlock")
dbReadTable(conn, "idblock")
driver <- dbDriver("MySQL")
db_file <- "path/to/MySQL/database"
conn <- dbConnect(driver, db_file)
dbReadTable(conn, "idblock")
driver <- dbDriver("MySQL")
db_file <- "path/to/MySQL/database"
conn <- dbConnect(driver, db_file)
# define a database driver, type is "SQLite"
driver <- dbDriver("SQLite")
# read a database file
db_file <- system.file(
"extdata",
"crabtag.sqlite",
package = "learningr"
)
# connect the database driver and database file
conn <- dbConnect(driver, db_file)
dbReadTable(conn, "idblock")
