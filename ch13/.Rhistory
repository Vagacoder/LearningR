## How to install package
# access additional repository
setRepositories()
install.packages("xts")
# from github need devtools package
install.packages("devtools")
library(devtools)
install_github("knitr", "yihui")
## update packages
update.packages(ask = FALSE)
# lapply(packageList[,"LibPath"], rowSums)
table(packageList[,"LibPath"])
View(installed.packages)
View(installed.packages())
## Chapter 11
# Data and times
library(lubridate)
## Chapter 11
# Data and times
install.packages("lubridate")
## Chapter 11
# Data and times
install.packages("lubridate")
library(lubridate)
View(installed.packages())
# POSIX dates and times
Sys.time()
# POSIX dates and times
(now_ct <- Sys.time())
class(noew_ct)
class(now_ct)
unclass(now_ct)
(now_lt <- as.POSIXlt(now_ct))
class(now_lt)
unclass(now_lt)
# using index to acces each elemetn in POSIXlt
now_lt$sec
now_lt[["min"]]
now_lt[["zone"]]
now_lt[['min']]
now_lt[[min]]
now_lt$min
now_lt[["min"]]
# using index to acces each elemetn in POSIXlt
now_lt
now_lt["min"]
# using index to acces each elemetn in POSIXlt
now_lt
unclass(now_lt)
now_lt["min"]
now_lt[["zone"]]
# date class
(now_date <- as.Date(now_ct))
class(now_date)
unclass(now_date)
## parse the date and time from and to string
# strptime()
moon_landings_str <- c(
"20:17:40 20/07/1969",
"06:54:35 19/11/1969",
"09:18:11 05/02/1971",
"22:16:29 30/07/1971",
"02:23:35 21/04/1972",
"19:54:57 11/12/1972"
)
(moon_landings_lt <- strptime(
moon_landings_str,
"%H:%M:%S %d/%m/%Y",
tz = "UTC"
))
# if format does not match, will return NA
strptime(
moon_landings_str,
"%H:%M:%S %d-%m-%Y",
tz = "UTC"
)
# if format does not match, will return NA
strptime(
moon_landings_str,
"%H:%M:%S %d/%m-%Y",
tz = "UTC"
)
# if format does not match, will return NA
strptime(
moon_landings_str,
"%H:%M:%S %d/%m/%Y",
tz = "UTC"
)
## formatting dates
# strftime()
strftime(now_ct, "It's %I:%M%p on %A %d %B, %Y.")
strftime(now_ct, "It's %H:%M%p on %A %d %B, %Y.")
strftime(now_ct, "It's %H:%M%p on %A %d %m, %Y.")
## time zone
# default time zone
Sys.timezone()
Sys.getlocale()
Sys.getlocale("LC_TIME")
# use Olson form
steftime(now_ct, tz = "America/Los_Angeles")
# use Olson form
strftime(now_ct, tz = "America/Los_Angeles")
strftime(now_ct, tz = "Africa/Brazzaville")
strftime(now_ct, tz = "Asia/Kolkata")
zone.tab
file.path(R.home("share"),"zoneinfo", "zone.tab")
(file.path(R.home("share"),"zoneinfo", "zone.tab"))
# manual offset from UTC
strftime(now_ct, tz = "")
strftime(now_ct, tz = "UTC")
strftime(now_ct, tz = "UTC-5")
strftime(now_ct, tz = "GMT-5")
strftime(now_ct, tz = "-5")
#
strftime(now_ct, tz = "EST")
strftime(now_ct, tz = "PST8PDT")
strftime(now_ct, tz = "PST")
strftime(now_ct, tz = "PST8PDT")
strftime(now_ct, tz = "PDT")
strftime(now_ct, tz = "PST")
strftime(now_ct, tz = "PST8PDT")
# using abbreviation
strftime(now_ct, tz = "EST")
strftime(now_ct, tz = "Asia/Tokyo")
now_lt
strftime(now_lt, tz = "Asia/Tokyo")
strftime(as.POSIXct(now_lt), tz = "Asia/Tokyo")
## Arithmetic on dates and times
now_ct + 86400
now_ct
now_lt
now_lt + 86400
now_date
now_date + 1
the_start_of_time <- as.Date("1970-01-01")
(the_start_of_time <- as.Date("1970-01-01"))
(the_end_of_time <- as.Date("2012-12-21"))
(all_time <- the_end_time - the_start_of_time)
(all_time <- the_end_of_time - the_start_of_time)
class(all_time)
unclass(all_time)
difftime(the_end_of_time, the_start_of_time, units = "secs")
difftime(the_end_of_time, the_start_of_time, units = "weeks")
seq(the_start_of_time, the_end_of_time, by = "1 year")
seq(the_start_of_time, the_end_of_time, by = "500 days")
methods(class = "POSIXt")
methods(class = "Date")
# lubridate package
john_harrison_birth_date <- c( #He invented the marine chronometer
"1693-03 24",
"1693/03\\24",
"Tuesday+1693.03*24"
)
ymd(john_harrison_birth_date)
# lubridate package
methods(lubridate)
# lubridate package
methods(class = "lubridate")
date_format_function <-
stamp("A moon landing occurred on Monday 01 January 1900 at 18:00:00.")
(duration_one_to_ten_years <- dyears(1:10))
?dyears
today() + duration
today() + duration_one_to_ten_years
dminutes(100)
years(10)
years(1:10)
(period_one_to_ten_years <- years(1:10))
today() + period_one_to_ten_years
# interval
a_year <- dyears(1)
as.period(a_year)
start_date <- ymd("2016-02-28")
(interval_over_leap_year <- new_interval(
start_date,
start_date + a_year
))
as.period(interval_over_leap_year)
as.period(interval_over_leap_year)
# interval operator %--% and %within%
ymd("2016-02-28") %--% ymd("2016-03-01")
ymd("2016-02-29") %within% interval_over_leap_year
ymd("2016-02-27") %within% interval_over_leap_year
ymd("2016-02-29") %within% interval_over_leap_year
# with_tz function
now_lt
with_tz(now_lt, tz = "America/Los_Angeles")
with_tz(now_lt, tz = "Africa/Brazzaville")
with_tz(now_lt, tz = "Asia/Kolkata")
with_tz(now_lt, tz = "Australia/Adelaide")
# olson_time_zones function
head(olson_time_zones())
olson_time_zones()
olson_time_zones("longitude")
# Q11-3
date()
# Q11-3
current_date <- date()
# Q11-3
current_date <- date()
strftime(current_date, "%B, %Y")
# Q11-3
current_date <- Sys.time()
strftime(current_date, "%B, %Y")
# Q11-4
(current_date + dminutes(60))
# Q11-4
curret
# Q11-4
current_date
(current_date + dminutes(60))
# Q11-5
one_date <- as.Date("2016-01-01")
one_date
one_year_duration <- dyears(1)
one_year_period <- years(1)
(one_date + one_year_duration)
(one_date + one_year_period)
(current_date + 3600)
(current_date + dminutes(60))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943--2-25"))
b_days
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943-2-25"))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943-2-25")))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943-2-25")))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07"),
as.Date("1940-10-09"),
as.Date("1942-06-18"),
as.Date("1943-2-25")
)
b_days
strftime(b_days, "%B %d %m %y")
?strftime
strftime(b_days, "%a %d %B %y")
strftime(b_days, "%a %d %b %y")
?Sys.timezone
Sys.timezone(location = TRUE)
# E11-2
Sys.timezone(location = TRUE)
OlsonNames(tzdir = NULL)
# E11-3
input <- input("your B days: ")
inputDate <- c("1940-07-07", "1940-10-09","1942-06-18","1943-2-25")
inputDate <- c("1940-07-07", "1940-10-09","1942-06-18","1943-2-25")
b_days2 <- strptime(inputDate, "%Y-%m-%d")
b_days2
b_days
b_days2 <- strptime(inputDate, "%Y-%m-%d", tz = FALSE)
b_days2 <- strptime(inputDate, "%Y-%m-%d", tz = "UTC")
b_days2
strftime(b_days, "%a %d %b %y")
strftime(b_days2, "%a %d %b %y")
setwd("~/R/LearningR/ch13")
## Exercises
# E13-1
# 1
hafuFile <- system.file("extdata", "hafu.csv", package = "learningr")
hafuData <- read.csv(hafuFile)
head(hafuData)
hafu_father_uncertain <- str_detect(hafuData$Father, fixed("?"))
head(hafu_father_uncertain)
# clean string
# turn "Y"/"N" to TRUE/FALSE
library(xlsx)
library(stringr)
# unify all variant low- and upper-case string
library(plyr)
# melt function in reshape2 pkg (reshape2 pkg is better than reshape pkg)
library(reshape2)
library(RSQLite)
library(DBI)
library(sqldf)
# using SQL
# R functions are more concise and readable than SQL
install.packages("sqldf")
library(RSQLite)
library(DBI)
library(sqldf)
# using SQL
# R functions are more concise and readable than SQL
install.packages("sqldf")
library(RSQLite)
library(DBI)
library(sqldf)
hafu_father_uncertain <- str_detect(hafuData$Father, fixed("?"))
head(hafu_father_uncertain)
hafu_mother_uncertain <- str_detect(hafuData$Mother, fixed("?"))
head(hafu_mother_uncertain)
hafuData$Uncertain_Father <- hafu_father_uncertain
hafuData$Uncertain_Mother <- hafu_mother_uncertain
head(hafuData)
# 2
hafuData$Father <- str_replace(hafuData$Father, fixed("?"), "")
hafuData$Mother <- str_replace(hafuData$Mother, fixed("?"), "")
head(hafuData)
# 3
common <- function(x) {
sorted <- sort(x, decreasing = TRUE)
sorted[1:10]
}
common(hafuData$Year)
# 3
common <- function(x) {
sorted <- unqiue(sort(x, decreasing = TRUE))
sorted[1:10]
}
common(hafuData$Year)
?unique
# 3
common <- function(x) {
sorted <- sort(x, decreasing = TRUE)
unique(sorted)[1:10]
}
common(hafuData$Year)
head(hafuData)
# E13-2
hafuData_long <- melt(hafuData, id.vars = "Father")
# melt function in reshape2 pkg (reshape2 pkg is better than reshape pkg)
library(reshape2)
# melt function in reshape2 pkg (reshape2 pkg is better than reshape pkg)
install.packages("reshape2")
library(reshape2)
# E13-2
hafuData_long <- melt(hafuData, id.vars = "Father")
hafuData_long
head(hafuData_long)
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Mother"))
head(hafuData_long1)
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Mother"))
head(hafuData_long1)
head(hafuData_long1)
## Exercises
# E13-1
# 1
hafuFile <- system.file("extdata", "hafu.csv", package = "learningr")
hafuData <- read.csv(hafuFile)
head(hafuData)
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Mother"))
head(hafuData_long1)
hafuData_long1
head(hafuData)
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Mother"))
head(hafuData_long1)
head(hafuData)
head(hafuData)
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Mother"))
head(hafuData_long1)
hafuData_long1
head(hafuData_long1)
head(hafuData)
head(hafuData_long1)
## Exercises
# E13-1
# 1
hafuFile <- system.file("extdata", "hafu.csv", package = "learningr")
hafuData <- read.csv(hafuFile)
head(hafuData)
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Mother"))
head(hafuData_long1)
head(hafuData)
hafuData_long1
# this is measuring two
hafuData_long1 <- melt(hafuData, measure.vars = c("Father", "Year"))
# E13-3
common <- function(x) {
sorted <- sort(x, decreasing = TRUE)
unique(sorted)[1:10]
}
common(hafuData$Year)
common(hafuData$Mother)
table(hafuData$Mother)
sort(table(hafuData$Mother), decreasing = TRUE)
?table
#
count(hafuData)
#
count(hafuData$Mother)
# E13-3
common <- function(x) {
counted <- count(x)
sorted <- sort(counted, decreasing = TRUE)
unique(sorted)[1:10]
}
common(hafuData$Mother)
#
count(hafuData$Mother)
#
count(hafuData$Mother)
sort(count(hafuData$Mother)$freq)
ord(count(hafuData$Mother)$freq)
order(count(hafuData$Mother)$freq)
?order
order(count(hafuData$Mother)$freq, decreasing = TRUE)
ordered <-order(count(hafuData$Mother)$freq, decreasing = TRUE)
#
counted_hafu_mother <- count(hafuData$Mother)
ordered_hadu_mother <- order(count(hafuData$Mother)$freq, decreasing = TRUE)
#
counted_hafu_mother <- count(hafuData$Mother)
counted_hafu_mother
ordered_hafu_mother
ordered_hadu_mother <- order(counted_hafu_mother$freq, decreasing = TRUE)
ordered_hafu_mother
ordered_hadu_mother <- order(counted_hafu_mother$freq, decreasing = TRUE)
ordered_hafu_mother
ordered_hafu_mother <- order(counted_hafu_mother$freq, decreasing = TRUE)
ordered_hafu_mother
counted_hafu_mother[ordered_hafu_mother]
counted_hafu_mother[[ordered_hafu_mother]]
counted_hafu_mother$x[[ordered_hafu_mother]]
counted_hafu_mother$x[ordered_hafu_mother]
mother_tbale$mother <- counted_hafu_mother$x[ordered_hafu_mother]
mother_tbale <- counted_hafu_mother$x[ordered_hafu_mother]
mother_table
mother_table <- counted_hafu_mother$x[ordered_hafu_mother]
mother_table
mother_table <- data.frame(
Mother = ordered_hafu_mother,
Count = counted_hafu_mother
)
mother_table
counted_hafu_mother
mother_table <- data.frame(
Count = sort(counted_hafu_mother)
)
mother_table <- data.frame(
Count = sort(counted_hafu_mother$freq)
)
mother_table
mother_table <- data.frame(
#Mother = ordered_hafu_mother,
Count = counted_hafu_mother
)
mother_table
sort(mother_table)
sort(mother_table$Count.freq)
mother_table <- data.frame(
Mother = ordered_hafu_mother,
Count = counted_hafu_mother
)
mother_table
ordered_hafu_mother
counted_hafu_mother
mother_table <- data.frame(
Mother = counted_hafu_mother$x[ordered]
Count = counted_hafu_mother
)
mother_table <- data.frame(
Mother = counted_hafu_mother$x[ordered_hafu_mother],
Count = counted_hafu_mother$freq[ordered_hafu_mother]
)
mother_table
head(mother_table, 10)
# key is the table function
table(hafuData$Mother)
sort(table(hafuData$Mother), decreasing = TRUE)
head(sort(table(hafuData$Mother), decreasing = TRUE), 10)
head(mother_table, 10)
#
counted_hafu_mother <- count(hafuData$Mother)
counted_hafu_mother
?count
#
arrange(counted_hafu_mother, desc(freq))
?arrange
## Chapter 14
# 1. Summary Statistics
# e.g. obama vs mccain
data(obama_vs_mccain, package = "learningr")
mean(obama)
## Chapter 14
# 1. Summary Statistics
# e.g. obama vs mccain
data(obama_vs_mccain, package = "learningr")
obama <- obama_vs_mccain$Obama
mean(obama)
median(obama)
obama
obama_vs_mccain
table(obama)
table(obama_vs_mccain)
table(cut(obama, seq.int(0, 100,10)))
# var() and sd()
var(obama)
sd(obama)
mad(obama)
# min(), max(), pmin() and pmax()
min(obama)
with(obama_vs_mccain, pmin(Obama, McCain))
with(obama_vs_mccain)
obama_vs_mccain
# min(), max(), pmin() and pmax()
min(obama)
pmin(obama)
pmin(obama, mccain)
pmin(obama_vs_mccain$Obama, obama_vs_mccain$McCain)
with(obama_vs_mccain, pmin(Obama, McCain))
with(obama_vs_mccain)
?with
with(c(1:10))
with(c(1:10), c(20:30)
)
