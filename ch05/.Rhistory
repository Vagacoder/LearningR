# add names to list
names(a_list) <- c("catalan", "months", "involutary", "arcsin")
a_list
# list inside list
(main_list <- list(
middle_list = list(
element_in_middle_list = diag(3),
inner_list = list(
element_in_inner_list = pi ^ 1:4,
another_element_in_inner_list = "a"
)
),
element_in_main_list = log10(1:10)
))
# atomic and recursive variabnle
is.atomic(list())
is.recursive(list())
is.atomic(numeric())
is.recursive(numeric())
# length of list, number of top level elements
length(a_list)
length(main_list)
dim(a_list)
?nrow
nrow(a_list)
NROW(a_list)
# List cannot do arithmetic work, but appropriate elements can do
l1 <- list(1:5)
l2 <- list(6:10)
l1[1] + l2[2]
l1[[1]] + l2[[2]]
l1[1] + l2[1]
l1[[1]] + l2[[2]]
l1[[1]] + l2[[1]]
print(l1[1])
print(l1)
# indexing list
l <- list(
first = 1,
second = 2,
third = list(
alpha = 3.1,
beta = 3.2
)
)
l
l[1:2]
l[-3]
l[TRUE, TRUE, FALSE]
l[C(TRUE, TRUE, FALSE)]
l[c(TRUE, TRUE, FALSE)]
l[c("first","second")]
# access content of element
l[[1]]
l[["first"]]
# is.list function
is.list(l1)
is.list(l1[[1]])
typeof(l1)
typeof(l1[[1]])
typeof(l1[1])
l$first
l$f
l$f
# nested list
l[["third"]]["beta"]
l[["third"]][["beta"]]
l[[c("third", "beta")]]
# NULL, if the index is out of boundary
l[c(4,2,5)]
l[["fourth"]]
l[[3]]
l[[1]]
l[[2]]
l[[4]]
# Convert vector and list
busy_beaver <- c(1, 6, 21, 107)
as.list(busy_beaver)
as.numeric(list(1,6,21,107))
(prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine = c(3, 3),
ten = c(2, 5)
))
unlist(prime_factors)
# Combine lists
c(list(a=1, b=2), list(3))
c(list(a=1, b=2), 3)
(matrix_list_hybrid <- cbind(
list(a = 1, b = 2),
list(c = 3, list(d = 4))
))
str(matrix_list_hybrid)
# NULL
(uk_bank_holidays_2013 <- list(
Jan = "New Year's Day",
Feb = NULL,
Mar = "Good Friday",
Apr = "Easter Monday",
May = c("Early May Bank Holiday", "Spring Bank Holiday"),
Jun = NULL,
Jul = NULL,
Aug = "Summer Bank Holiday",
Sep = NULL,
Oct = NULL,
Nov = NULL,
Dec = c("Christmas Day", "Boxing Day")
))
# properties of NULL
length(NULL)
length(NA)
is.null(NULL)
is.null(NA)
is.na(NULL)
uk_bank_holidays_2013$Jan <- NULL
uk_bank_holidays_2013$Feb <- NULL
uk_bank_holidays_2013
?sd
(arguments_of_sd <- formals(sd))
pairlist()
# Data frame
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
class(a_data_frame)
# name of data frame rows
y <- rnorm(5)
names(y) <- month.name[1:5]
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = c("Jackie", "Tito", "Jermaine", "Marlon", "Michael")
)
# different length of vectors in data frame
data.frame( #lengths 1, 2, and 4 are OK
x = 1, #recycled 4 times
y = 2:3, #recycled twice
z = 4:7 #the longest input; no recycling
)
data.frame( #lengths 1, 2, and 3 cause an error
x = 1, #lowest common multiple is 6, which is more than 3
y = 2:3,
z = 4:6
)
# Indexing data frame
a_data_frame
a_data_frame[2:3, -3]
a_data_frame[-3]
a_data_frame[2:3, 1]
a_data_frame[2:3, 1]
a_data_frame[c(FALSE, TRUE, TRUE, FALSE, FALSE), c("x", "y")]
class(a_data_frame[2:3, 1])
class(a_data_frame[2:3, -3])
# indexing element in data frame
a_data_frame$x[2:3]
# indexing element in data frame
a_data_frame$x[2:3]
a_data_frame[[1]][2:3]
a_data_frame[[1]][2:3]
a_data_frame[["x"]][2:3]
# Indexing data frame
a_data_frame
# Data frame
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
a_data_frame[a_data_frame$y > 0 | a_data_frame$z, "x"]
subset(a_data_frame, y > 0 | z, x)
load("C:/Users/Skuller/R/LearningR/learningR.RData")
setwd("C:/Users/Skuller/R/LearningR/ch05")
l$("first")
l$first
?$
?l
??l
a <- lislt(1:3, 3, "this")
a <- list(1:3, 3, "this")
names(a) <- c("first", "second", "third")
a$second
a$third
is.list(a)
is.vector(a)
nrow(a)
NROW(a)
?nrow
b <- c(a, list(2, 7:16, 5), 4)
nrow(b)
b
b <- array(a, c(list(2, 7:16, 5), 4))
b <- array(a, lsit(c(2, 7:16, 5), 4))
b <- array(a, list(c(2, 7:16, 5), 4))
b <- array(a, list(2, 7:16, 4))
# List cannot do arithmetic work, but appropriate elements can do
l1 <- list(1:5)
l2 <- list(6:10)
l1[1] + l2[1]
l1[[1]] + l2[[1]]
print(l1[1])
print(l1)
# indexing list
l <- list(
first = 1,
second = 2,
third = list(
alpha = 3.1,
beta = 3.2
)
)
# indexing like vector, positive, negative, name, boolean
l
l[1:2]
l[-3]
l[c(TRUE, TRUE, FALSE)]
l[c("first","second")]
# access content of element, using [[]]
l[[1]]
l[["first"]]
# is.list function
is.list(l1)
is.list(l1[[1]])
typeof(l1[1])     # type of list
typeof(l1[[1]])   # type of integer
# is.list function
l1
# nested list
l[["third"]]["beta"]
l[["third"]][["beta"]]
l[[c("third", "beta")]]
# NULL, if the index is out of boundary
l[c(4,2,5)]
l[["fourth"]]
l[[4]]
l[[3]]
l[[2]]
l[[1]]
l[[3]][[1]]
l[[3]][[2]]
# Data frame
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
class(a_data_frame)
# name of data frame rows
y <- rnorm(5)
names(y) <- month.name[1:5]
y <- NULL
# name of data frame rows
y <- rnorm(5)
names(y) <- month.name[1:5]
y
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = c("Jackie", "Tito", "Jermaine", "Marlon", "Michael")
)
# different length of vectors in data frame
data.frame( #lengths 1, 2, and 4 are OK
x = 1, #recycled 4 times
y = 2:3, #recycled twice
z = 4:7 #the longest input; no recycling
)
data.frame( #lengths 1, 2, and 3 cause an error
x = 1, #lowest common multiple is 6, which is more than 3
y = 2:3,
z = 4:6
)
# Indexing data frame
a_data_frame
a_data_frame[2:3, -3]
a_data_frame[2:3, 1]
a_data_frame[c(FALSE, TRUE, TRUE, FALSE, FALSE), c("x", "y")]
class(a_data_frame[2:3, -3])
class(a_data_frame[2:3, 1])
# indexing element in data frame
a_data_frame$x[2:3]
a_data_frame[[1]][2:3]
a_data_frame[["x"]][2:3]
a_data_frame[a_data_frame$y > 0 | a_data_frame$z, "x"]
subset(a_data_frame, y > 0 | z, x)
# data frame manipulation
a_data_frame
t(a_data_frame)
t(a_data_frame)
t(t(a_data_frame))
another_data_frame <- data.frame( #same cols as a_data_frame, different order
z = rlnorm(5), #lognormally distributed numbers
y = sample(5), #the numbers 1 to 5, in some order
x = letters[3:7]
)
rbind(a_data_frame, another_data_frame)
cbind(a_data_frame, another_data_frame)
letters[3:7]
# merge
merge(a_data_frame, another_data_frame)
# merge
merge(a_data_frame, another_data_frame, by = "x")
merge(a_data_frame, another_data_frame, by = "y")
merge(a_data_frame, another_data_frame, by = "x")
merge(a_data_frame, another_data_frame, by = "z")
merge(a_data_frame, another_data_frame, by = "x", all = TRUE)
merge(a_data_frame, another_data_frame, all = TRUE)
# colSums and colMeans
colSums(a_data_frame[, 2:3])
colMeans(a_data_frame[, 2:3])
list(alpha = 1, list(beta = 2, gamma = 3, delta = 4), eta = NULL)
# Quiz
# Q5-1
len(list(alpha = 1, list(beta = 2, gamma = 3, delta = 4), eta = NULL))
# Quiz
# Q5-1
NROW(list(alpha = 1, list(beta = 2, gamma = 3, delta = 4), eta = NULL))
# Q5-4
# 1, create using merge()
# 2, create using cbind()
#
# By passing check.names = FALSE to data.frame.
a_data_frame
a_data_frame <- check.names = FALSE
data.frame(
x = letters[1:5],
x = months(5)
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
x = months(5),
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
x = months(1, 5),
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
x = month.name[1:5],
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
x = month.name[1:5],
z = runif(5) > 0.5,
check.names = FALSE
)
# Exercise 5-1
number <- c([1:10])
# Exercise 5-1
number <- c(1:10)
number
sq <- number**2
sq
list(c(0,1,4,9), c(16), 25, 36, 49, NULL, 64, NULL, 81, NULL)
# a much better method from textbook
x <- 0:99
sqrt <- sqrt(x)
sqrt
floor(sqrt)
sqrt ==floor(sqrt)
# a much better method from textbook
x <- 0:99
sqrt <- sqrt(x)
isSq <- sqrt == floor(sqrt)
sqNumber <- x[isSq]
sqNumber
# a much better method from textbook
x <- 0:99
sqrt <- sqrt(x)
isSq <- sqrt == floor(sqrt)
sqNumber <- x[isSq]
sqNumber
groups <- cut(
sqNumber,
seq.int(min(x), max(x), 10),
include.lowest = TRUE,
right = FALSE
)
split(sqNumber, groups)
iris
# E5-2
subset(iris, 1:150, c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
# E5-2
iris
typeof(iris)
subset(iris, 1:150, c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
subset(iris, TRUE, c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
sub_iris <- subset(iris, TRUE, c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
sub_iris
colSums(sub_iris)
sub_iris <- iris[, 1:4]
sub_iris
colSums(sub_iris)
beaver1
beaver2
# E5-3
nrow(beaver1)
n2 <- nrow(beaver2)
# E5-3
n1 <- nrow(beaver1)
col1 <- 1:n1
col1
col2 <- 1:n2
newB1 <-cbind(col1, beaver1)
newB1 <- cbind(col1, beaver1)
newB1
beaver1
beaver2
col1 <- rep(1, n1)
col1
beaver1
newB1 <- cbind(col1, beaver1)
newB1
# E5-3
n1 <- nrow(beaver1)
n2 <- nrow(beaver2)
id <- rep(1, n1)
newB1 <- cbind(id, beaver1)
id <- rep(1, n2)
newB2 <- cbind(id, beaver2)
newB1
newB2
newB <- rbind(newB1, newB2)
newB
newAB <- newB[activ == 1]
newAB <- newB["activ" == 1]
newAB
newAB <- newB[newB$activ == 1]
newAB <- newB[,1:5]
newAB
newAB <- newB[activ == 1,1:5]
newAB <- newB["activ" == 1,1:5]
newAB
# newAB <- newB["activ" == 1,1:5]
newAB <- subset(newB, activ)
# newAB <- newB["activ" == 1,1:5]
newAB <- subset(newB, activ == 1)
newAB
iris
iris[1:4]
iris[, 1:4]
# new environment
an_environment <- new.env()
# assign variable to environment
an_environment[["pythag"]] <- c(12, 15, 20, 21)
an_environment$root <- polyroot(c(6, -5, 1))
assign(
"moonday",
weekdays(as.Date("1969/07/20")),
an_environment
)
an_environment
View(an_environment)
View(an_environment)
View(an_environment)
# retrieve variable form environment
an_environment[["pythag"]]
an_environment$root
get("moonday", an_environment)
ls(an_environment)
ls(envir = an_environment)
ls.str(envir = an_environment)
# exists functin
exists("pythag", an_environment)
exists("python", an_environment)
#Convert to list
(a_list <- as.list(an_environment))
# to environment
as.environment(a_list)
list2env(a_list)
# nested environment
nested_environment <- new.env(parent = an_environment)
exists("pythag", nested_environment)
exists("pythag", nested_environment, inherits = FALSE)
