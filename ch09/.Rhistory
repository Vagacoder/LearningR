# Q6-4
?sd
?mean
?sum
?list2env
?do.call
?formals
new.env(multiples_of_pi)
multiples_of_pi <- new.env()
# new environment
an_environment <- new.env()
# assign variable to environment
an_environment[["pythag"]] <- c(12, 15, 20, 21)
an_environment$root <- polyroot(c(6, -5, 1))
assign(
"moonday",
weekdays(as.Date("1969/07/20")),
an_environment
)
View(an_environment)
# list environment content
ls(an_environment)
ls(envir = an_environment)
multiples_of_pi[["two_pi"]] <- 2*pi
multiples_of_pi$three_pi <- 3*pi
assign("four_pi", 4*pip, multiples_of_pi)
assign("four_pi", 4*pi, multiples_of_pi)
View(multiples_of_pi)
ls(multiples_of_pi)
multi
multiples_of_pi
ls.str(multiples_of_pi)
# E6-2
checknumber <- function(x)
{
(x%%2) ==0
}
checknumber(-5:5, Inf, -Inf, NA, NaN)
checknumber(c(-5:5, Inf, -Inf, NA, NaN))
Inf %%2
-Inf %% 2
NA %% 2
NaN %% 2
# E6-3
defunction <- function(x)
{
c(formalArgs(x), body(x))
}
defunctin(rt)
defunction(rt)
message("Happy Groundhog Day!")}
## Loops
# repeat loop (do while loop)
repeat {
message("Happy Groundhog Day!")}
# use break
repeat{
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
if(action == "Win heart of Andie McDowell") break
}
# use next (skip current loop and go to next one)
repeat{
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
if(action == "Rob a bank")
{
message("Quietly skipping to the next iteration")
next
}
message("action = ", action)
if(action == "Win heart of Andie McDowell") break
}
# use next (skip current loop and go to next one)
repeat{
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
if(action == "Rob a bank")
{
message("Quietly skipping to the next iteration")
next
}
message("action = ", action)
if(action == "Win heart of Andie McDowell") break
}
# while loop
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
while(action != "Win heart of Andie McDowell")
{
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
}
while(action != "Win heart of Andie McDowell"){
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
}
while(action != "Win heart of Andie McDowell"){
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
}
# while loop
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
while(action != "Win heart of Andie McDowell"){
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
}
# for loops
for(i in 1:5) message("i = ", i)
for(i in 1:5){
j <- i ^ 2
message("j = ", j)
}
# for loops
for(i in 1:5) {message("i = ", i)}
for(i in 1:5){
j <- i ^ 2
message("j = ", j)
}
for(month in month.name){
message("The month of ", month)
}
for(yn in c(TRUE, FALSE, NA)){
message("This statement is ", yn)
}
l <- list(
pi,
LETTERS[1:5],
charToRaw("not as complicated as it looks"),
list(
TRUE
)
)
for(i in l){
print(i)
}
## Exercises
# E8-1
two_d6 <- function(n){
random_numbers <- matrix(
sample(6, 2 * n, replace = TRUE),
nrow = 2
)
colSums(random_numbers)
}
two_d6(10
two_d6(10)
two_d6(10)
point <- c(NA, NA, "Same as score")
game_status <- c(FALSE, TRUE, NA)
crap_score <- two_d6(10)
game_status <- c(FALSE, TRUE, NA)
point <- c(NA, NA, "Same as score")
crap_score <- two_d6(1)
if (crap_score == c(2,3,12)){
game_status <- FALSE
point <- NA
} else if (crap_score == c(7,11)){
game_status <- TRUE
point <- NA
} else {
game_status <- NA
point <- crap_score
}
?%in%
?operator
??%in%
??\%in\%
??operator
2 in c(2,3,4)
o <- 2
o in c(2,3,4)
o %in% c(2,3,4)
crap_score <- two_d6(1)
game_status <- c(FALSE, TRUE, NA)
point <- c(NA, NA, "Same as score")
if (crap_score %in% c(2,3,12)){
game_status <- FALSE
point <- NA
} else if (crap_score %in% c(7,11)){
game_status <- TRUE
point <- NA
} else {
game_status <- NA
point <- crap_score
}
game_status
point
# E8-3
sea_shells <- c(
"She", "sells", "sea", "shells", "by", "the", "seashore",
"The", "shells", "she", "sells", "are", "surely", "seashells",
"So", "if", "she", "sells", "shells", "on", "the", "seashore",
"I'm", "sure", "she", "sells", "seashore", "shells"
)
for (i in sea_shells){
print(sprintf("%s has %d words", i, nchar(i)))
}
charNumber <- nchar(sea_shells)
charNumber
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d word", i))
print(toString(unique(sea_shells[charNumber == i])))
}
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d word %s", i), toString(unique(sea_shells[charNumber == i])))
print(toString(unique(sea_shells[charNumber == i])))
}
print(sprintf("%d word %s", i, toString(unique(sea_shells[charNumber == i])))
print(toString(unique(sea_shells[charNumber == i])))
}
for (i in min(charNumber):max(charNumber)){
for (i in min(charNumber):max(charNumber)){
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d word %s", i, toString(unique(sea_shells[charNumber == i]))))
print(toString(unique(sea_shells[charNumber == i])))
}
charNumber <- nchar(sea_shells)
charNumber
for (i in sea_shells){
print(sprintf("%s has %d words", i, nchar(i)))
}
charNumber <- nchar(sea_shells)
charNumber <- nchar(sea_shells)
charNumber
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d word %s", i, toString(unique(sea_shells[charNumber == i]))))
print(toString(unique(sea_shells[charNumber == i])))
}
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d word %s", i, toString(unique(sea_shells[charNumber == i]))))
# print(toString(unique(sea_shells[charNumber == i])))
}
print(sprintf("%d letter word: %s", i, toString(unique(sea_shells[charNumber == i]))))
charNumber <- nchar(sea_shells)
charNumber
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d letter word: %s", i, toString(unique(sea_shells[charNumber == i]))))
# print(toString(unique(sea_shells[charNumber == i])))
}
rep(2, 10)
replicate(2, 10)
rep(runif(1),4)
replicate(4, runif(1))
time_for_commute <- function(){
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.1, 0.2, 0.3, 0.4)
)
#Find the time to travel, depending upon mode of transport
time <- switch(
mode_of_transport,
car = rlnorm(1, log(30), 0.5),
bus = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
# using the replicate() gives instant vectorization
replicate(5, time_for_commute())
time_for_commute <- function(){
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.1, 0.2, 0.3, 0.4)
)
#Find the time to travel, depending upon mode of transport
time <- switch(
mode_of_transport,
car = rlnorm(1, log(30), 0.5),
bus = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
# using the replicate() gives instant vectorization
replicate(5, time_for_commute())
time_for_commute()
time_for_commute()
time_for_commute()
time_for_commute()
time_for_commute()
time_for_commute()
# Loopsing over lists
prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine = c(3, 3),
ten = c(2, 5)
)
head(prime_factors)
# Loopsing over lists
prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine = c(3, 3),
ten = c(2, 5)
)
head(prime_factors)
# hard way to do
unique_primes <- vector("list", length(prime_factors))
for(i in seq_along(prime_factors)){
unique_primes[[i]] <- unique(prime_factors[[i]])
}
names(unique_primes) <- names(prime_factors)
unique_primes
# easy way to do using lapply()
lapply(prime_factors, unique)
# vapply
vapply(prime_factors, length, numeric(1))
head(prime_factors)
# hard way to do
unique_primes <- vector("list", length(prime_factors))
unique_primes
names(unique_primes) <- names(prime_factors)
unique_primes
for(i in seq_along(prime_factors)){
unique_primes[[i]] <- unique(prime_factors[[i]])
}
# hard way to do
unique_primes <- vector("list", length(prime_factors))
unique_primes
for(i in seq_along(prime_factors)){
unique_primes[[i]] <- unique(prime_factors[[i]])
}
unique_primes
names(unique_primes) <- names(prime_factors)
unique_primes
vector("test", 10)
vector("list", 10)
vector("list", 2)
vector("list", 2) <- unique(prime_factors[[1]])
vector("list", 2) <- unique(prime_factors[[1:2]])
vector("list", 2)[[1]] <- unique(prime_factors[[1]])
t <- vector("list", 2)
t
t[[1]] <- "No1"
t
t[[1]] <- unique(c("No1", "No2", "No3", "No1"))
t
# easy way to do using lapply()
lapply(prime_factors, unique)
?lappy
?lapply
# sapply
sapply(prime_factors, unique)
# easy way to do using lapply()
lapply(prime_factors, unique)
# vapply
vapply(prime_factors, length, numeric(1))
sapply(prime_factors, length)
sapply(prime_factors, summary)
?source
source(ch09.r)
source("ch09.r")
dir()
dir(..)
dir("..")
source("..\r\learningr\ch09\ch09.r")
source("..\R\learningR\ch09\ch09.r")
source("../r/learningr/ch09/ch09.r")
print(source("../r/learningr/ch09/ch09.r"))
source("../r/learningr/ch09/ch09.r")
setwd("C:/Users/Skuller/R/LearningR/ch09")
dir()
# source() and dir()
r_files <- dir(pattern = "\\.R$")
lapply(r_files, source)
# source() and dir()
r_files <- dir(pattern = "\\.r$")
lapply(r_files, source)
r_files
lapply(r_files, source)
source()
#
complemented <- c(2, 3, 6, 18)
complemented
lapply(complemented, rep.int)
lapply(complemented, rep.int, times = 3)
rep.int(complemented)
rep.int(complemented, times = 3)
#
rep4x <- function(x) rep.int(4, times = x)
lapply(complemented, rep4x)
#
lapply(complemented, function(x) rep.int(4, times = x))
#
rep4x <- function(x) rep.int(4, times = x)
lapply(complemented, rep4x)
#
lapply(complemented, function(x) rep.int(4, times = x))
# eapply()
env <- new.env()
env$molien <- c(1, 0, 1, 0, 1, 1, 2, 1, 3)
env$larry <- c("Really", "leery", "rarely", "Larry")
eapply(env, length)
lapply(env, length)
## looping over arrays
# install matlab package
install.packages("matlab")
library(matlab)
library(matlab)
# to unload matlab package
detach("package:matlab")
library(matlab)
# magic()
(magic <- magic(4))
# magic()
(magic4 <- magic(4))
rowSums(magic4)
colSums(magic4)
diag(magic4)
sum(diag(magic4))
?diag
apply(magic4, 1, sum)
apply(magic4, 2, sum)
apply(magic4, 1, toString())
apply(magic4, 1, toString)
apply(magic4, 2, toString)
