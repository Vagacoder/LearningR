+
is.function('if')
is.function('for')
class(quoted_r_code)
paese(quoted_r_code)
parse(quoted_r_code)
parse(filename)
parsed_r_code <- parse(text = "atan(c(-Inf, -1, 0, 1, Inf))")
class(parsed_r_code)
eval(parsed_r_code)
# turn code into string
# e.g.
random_numbers <_ rt(1000, 2)
random_numbers <- rt(1000, 2)
hist(random_numbers)
divider <- function(numerator, denominator){
if(denominator == 0)  {
denominator_name <- deparse(substitute(denominator))
warning("The denominator, ", sQuote(denominator_name), ", is zero.")
}
numerator / denominator
}
top <- 3
bottom <- 0
divider(top, bottom)
# 5, OOP
# s3 class
print
today <- Sys.Date()
print(today)
print.Date()
print.Date
head(methods(print))
point_generator <- setRefClass(
"point",
fields = list(
x = "numeric",
y = "numeric"
),
methods = list(
#TODO
)
)
popint_generator(1, 10)
point_generator(1, 10)
(a_point <- point_generator$new(5, 3))
# construct a new object
point_generator(1, 10)
point_generator$help("initialize")
create_point <- function(x, y){
point_generator$new(x, y)
}
create_point(5,3)
a_point <- create_point(5,3)
a_point
point_generator <- setRefClass(
"point",
fields = list(
x = "numeric",
y = "numeric"
),
methods = list(
initialize = function(x = NA_real_, y = NA_real_)
{
"Assign x and y upon object creation."
x <<- x
y <<- y
},
distanceFromOrigin = function()
{
"Euclidean distance from the origin"
sqrt(x ^ 2 + y ^ 2)
},
add = function(point)
{
"Add another point to this point"
x <<- x + point$x
y <<- y + point$y
.self
}
)
)
a_point <- create_point(5,3)
a_point <- create_point(5,3)
create_point <- function(x, y){
point_generator$new(x, y)
}
a_point <- create_point(5,3)
a_point.add(a_point)
a_point <- create_point(3,4)
a_point$distanceFromOrigin()
a_point$add(a_point)
point_generator$fields()
point_generator$methods()
# inheritance
three_d_point_generator <- setRefClass(
"three_d_point",
fields = list(
z = "numeric"
),
contains = "point", #this line lets us inherit
methods = list(
initialize = function(x, y, z)
{
"Assign x and y upon object creation."
x <<- x
y <<- y
z <<- z
}
)
)
a_three_d_point <- three_d_point_generator$new(3, 4, 5)
# inheritance
three_d_point_generator <- setRefClass(
"three_d_point",
fields = list(
z = "numeric"
),
contains = "point", #this line lets us inherit
methods = list(
initialize = function(x, y, z)
{
"Assign x and y upon object creation."
x <<- x
y <<- y
z <<- z
},
distanceFromOrigin = function()
{
"Euclidean distance from the origin"
sqrt(x ^ 2 + y ^ 2 + z ^ 2)
}
)
)
a_three_d_point <- three_d_point_generator$new(3, 4, 5)
a_three_d_point$distanceFromOrigin()
## Exercises
# E16-1
harmonic <- function(x){
if (!is.numeric(x)){
warning("Please input number")
}
else if (x < 0){
warning("please input positive numbers")
}
else {
result <- 1/mean(1/x)
result
}
}
harmonic(c(1, 2, -1))
## Exercises
# E16-1
harmonic <- function(x){
if (!is.numeric(x)){
warning("Please input number")
}
if (x < 0){
warning("please input positive numbers")
}
else {
result <- 1/mean(1/x)
result
}
}
harmonic(c(1, 2, -1))
harmonic(c(1, "a", 2, -1))
harmonic(c(1, 2))
## Exercises
# E16-1
harmonic <- function(x){
if (!is.numeric(x)){
warning("Please input number")
}
for (a in x){
if (a < 0){
warning("please input positive numbers")
}}
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2))
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
## Exercises
# E16-1
harmonic <- function(x){
for (a in x){
if (!is.numeric(a)){
warning("Please input number")
}
if (a < 0){
warning("please input positive numbers")
}}
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2, "a"))
class(c(1,2)[1])
c(1,2)[1]
is.numeric(c(1,2)[1])
!is.numeric(c(1,2)[1])
is.numeric(c(1,2)[1])
is.numeric(c(1,2, "a")[1])
## Exercises
# E16-1
harmonic <- function(x){
for (a in x){
if (!is.numeric(a)){
stop ("Please input number")
}
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x)
result
}
is.numeric(c(1,2, "a")[1])
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
is.numberc(c(1,2))
is.numeric(c(1,2))
is.numeric(c(1,2, "a"))
is.numeric(c(1,2, "a"))
is.numeric(as.numeric(c(1,2,"a")))
as.numeric(c(1,2,"a"))
is.numeric(as.numeric(c(1,2,"a")))
harmonic(c(1, 2, "a"))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x, na.rm = TRUE)
result
}
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
harmonic(c(1, 2, -1))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x, na.rm = na.rm)
result
}
harmonic(c(1, 2, "a"))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x, na.rm = na.rm)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
na.rm(x)
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
x <- x[!is.na(x)]
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
x <- x[!is.na(x)]
x
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
x <- x[!is.na(x)]
print(x)
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
x <- x[!is.na(x)]
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
print(x)
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
message ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
x <- x[!is.na(x)]
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
print(x)
result <- 1/mean(1/x)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
# global option "warn",
# <0 : suppress warning text,
# =0 or 1: showing warning text
# =>2: turn warning to error
getOption("warn")
?mean
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
message ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (a < 0){
stop ("please input positive numbers")
}
}
print(x)
result <- 1/mean(1/x, na.rm = TRUE)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
?as.numeric()
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
message ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (a < 0 & is.numeric(a)){
stop ("please input positive numbers")
}
}
print(x)
result <- 1/mean(1/x, na.rm = TRUE)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
message ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (is.numeric(a) & a < 0){
stop ("please input positive numbers")
}
}
print(x)
result <- 1/mean(1/x, na.rm = TRUE)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
is.numeric(NA)
## Exercises
# E16-1
harmonic <- function(x, na.rm =FALSE){
if (!is.numeric(x)){
warning ("Please input number, non-numeric input is removed")
x <- as.numeric(x)
}
for (a in x){
if (!is.na(a) & a < 0){
stop ("please input positive numbers")
}  }
print(x)
result <- 1/mean(1/x, na.rm = TRUE)
result
}
harmonic(c(1, 2, -1))
harmonic(c(1, 2, "a"))
harmonic(c(1, 2, 3))
library(RUnit)
# E16-2
library(RUnit)
actual <- harmonic(c(1,2,4))
checkEqualsNumeric(expected, actual)
expected <- 12/7
actual <- harmonic(c(1,2,4))
checkEqualsNumeric(expected, actual)
expect_equal(expected, actual)
library(testthat)
expect_equal(expected, actual)
print(expect_equal(expected, actual))
expect_equal(expected, actual)
expect_error(harmonic())
print(expect_error(harmonic()))
checkException(harmonic())
checkException(harmonic(c(1)))
checkException(harmonic())
## Exercises
# E17-1
sum_of_squares <- function(x){
result <- x *(x+1)*(2*n +1)/6
result
}
sum_of_squares(1)
## Exercises
# E17-1
sum_of_squares <- function(x){
result <- x *(x+1)*(2*x +1)/6
result
}
sum_of_squares(1)
sum_of_squares(2)
square_data <- data.frame(c(1:10), sum_of_squares(1:10))
setwd("C:/Users/Skuller/R/LearningR/ch17")
package.skeleton("sum_square", c("sum_of_squares", "square_data" ))
# E17-2
# E17-3
check("sum_of_square")
# 3, checking and building packages
# check function in devtools pkg
library(devtools)
# E17-2
# E17-3
check("sum_of_square")
# E17-2
# E17-3
check("sum_square")
build("sum_square")
