z = runif(5) > 0.5
))
# Data frame
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
# Data frame
(a_data_frame <- data.frame(
x = letters[1:5],
y = c(rnorm(4), 1),
z = runif(5) > 0.5
))
# name of data frame rows
y <- rnorm(5)
names(y) <- month.name[1:5]
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = NULL
)
# name of data frame rows
y <- rnorm(5)
names(y) <- month.name[1:5]
# name of data frame rows
x = letters[1:5]
names(x) <- c("a", "b", "c", "d")
# name of data frame rows
x = letters[1:5]
names(x) <- c("a", "b", "c", "d")
y <- rnorm(5)
names(y) <- month.name[1:5]
data.frame(
x = x,
y = y,
z = runif(5) > 0.5
)
names(x) <- c("a", "b", "c", "d", "e")
names(y) <- month.name[1:5]
data.frame(
x = x,
y = y,
z = runif(5) > 0.5
)
# name of data frame rows
x = letters[1:5]
names(x) <- c("a", "b", "c", "d", "e")
y <- rnorm(5)
names(y) <- month.name[1:5]
data.frame(
x = x,
y = y,
z = runif(5) > 0.5
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = NULL
)
data.frame(
x = letters[1:5],
y = y,
z = runif(5) > 0.5,
row.names = c("Jackie", "Tito", "Jermaine", "Marlon", "Michael")
)
# different length of vectors in data frame
data.frame( #lengths 1, 2, and 4 are OK
x = 1, #recycled 4 times
y = 2:3, #recycled twice
z = 4:7 #the longest input; no recycling
)
data.frame( #lengths 1, 2, and 3 cause an error
x = 1, #lowest common multiple is 6, which is more than 3
y = 2:3,
z = 4:6
)
# Indexing data frame
a_data_frame
# Quiz ==================
# Q5-1
NROW(list(alpha = 1, list(beta = 2, gamma = 3, delta = 4), eta = NULL))
# a much better method from textbook
x <- 0:99
sqrt <- sqrt(x)
isSq <- sqrt == floor(sqrt)
isSq
sqNumber <- x[isSq]
sqNumber
groups <- cut(
sqNumber,
seq.int(min(x), max(x), 10),
include.lowest = TRUE,
right = FALSE
)
split(sqNumber, groups)
seq.int(min(x), max(x), 10)
# a much better method from textbook
x <- 0:99
sqrt <- sqrt(x)
sqrt
isSq
sqNumber <- x[isSq]
sqNumber
# E5-2
iris
typeof(iris)
sub_iris <- subset(iris, TRUE, c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
sub_iris <- iris[, 1:4]
sub_iris
colSums(sub_iris)
colSums(sub_iris)/NROW(sub_iris)
# E5-3
n1 <- nrow(beaver1)
n2 <- nrow(beaver2)
id <- rep(1, n1)
n1
n2
id
newB1 <- cbind(id, beaver1)
newB1
id <- rep(2, n2)
newB2 <- cbind(id, beaver2)
newB <- rbind(newB1, newB2)
# newAB <- newB["activ" == 1,1:5]
newAB <- subset(newB, activ == 1)
newAB
newB <- rbind(newB1, newB2)
newAB
# create factor
(heights <- data.frame(
height_cm = c(153, 181, 150, 172, 165, 149, 174, 169, 198, 163),
gender = c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
))
class(heights$height_cm)
class(heights$gender)
heights$gender
heights$gender[1] <-"Female"
class(heights$height_cm)
class(heights$gender)
heights$gender
heights$gender[1] <-"Female"
heights$gender
nlevels(heights$gender)
# using factor()
gender_char <- c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
(gender_fac <- factor(gender_char))
# change factor levels
# reverse the order of level, was "female", "male", is "male", "female"
factor(gender_char, levels = c("male", "female"))
# notice that, previous one used vector to create factor,
# this one changed created factor
factor(gender_fac, levels = c("male", "female"))
levels(gender_fac) <- c("male", "female")
# change factor levels
# reverse the order of level, was "female", "male", is "male", "female"
factor(gender_char, levels = c("male", "female"))
# notice that, previous one used vector to create factor,
# this one changed created factor
factor(gender_fac, levels = c("male", "female"))
levels(gender_fac) <- c("male", "female")
gender_fac
relevel(gender_fac, "male")
# notice that, previous one used vector to create factor,
# this one changed created factor
factor(gender_fac, levels = c("male", "female"))
# using factor()
gender_char <- c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
(gender_fac <- factor(gender_char))
# change factor levels
# reverse the order of level, was "female", "male", is "male", "female"
factor(gender_char, levels = c("male", "female"))
# notice that, previous one used vector to create factor,
# this one changed created factor
factor(gender_fac, levels = c("male", "female"))
levels(gender_fac) <- c("male", "female")
gender_fac
relevel(gender_fac, "male")
# using factor()
gender_char <- c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
(gender_fac <- factor(gender_char))
# using factor()
gender_char <- c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
(gender_fac <- factor(gender_char))
relevel(gender_fac, "male")
# drop factor levels
getting_to_work <- data.frame(
mode = c(
"bike", "car", "bus", "car", "walk",
"bike", "car", "bike", "car", "car"
),
time_mins = c(25, 13, NA, 22, 65, 28, 15, 24, NA, 14)
)
getting_to_work
levels(getting_to_work)
levels(getting_to_work$mode)
subset(getting_to_work, is.na(time_mins))
# unique function
unique(getting_to_work$mode)
# droplevels()
getting_to_work$mode <- droplevels(getting_to_work$mode)
getting_to_work
(getting_to_work <- subset(getting_to_work, !is.na(time_mins)))
getting_to_work
subset(getting_to_work, is.na(time_mins))
getting_to_work
# drop factor levels
getting_to_work <- data.frame(
mode = c(
"bike", "car", "bus", "car", "walk",
"bike", "car", "bike", "car", "car"
),
time_mins = c(25, 13, NA, 22, 65, 28, 15, 24, NA, 14)
)
subset(getting_to_work, is.na(time_mins))
(getting_to_work <- subset(getting_to_work, !is.na(time_mins)))
# unique function
unique(getting_to_work$mode)
# droplevels()
getting_to_work$mode <- droplevels(getting_to_work$mode)
getting_to_work
getting_to_work
getting_to_work <- droplevels(getting_to_work)
levels(getting_to_work$mode)
levels(getting_to_work$mode)
# ordered factors
happy_choices <- c("depressed", "grumpy", "so-so", "cheery", "ecstatic")
happy_values <- sample(happy_choices, 10000, replace =  TRUE)
happy_choices
happy_values
happy_fac <- factor(happy_values, happy_choices)
head(happy_fac)
happy_ord <- ordered(happy_values, happy_choices)
head(happy_ord)
is.factor(happy_ord)
is.ordered(happy_ord)
is.ordered(happy_fac)
# Converting variale, between continous and categorical
ages <- 16 + 50 * rbeta(10000, 2, 3)
ages
grouped_ages <- cut(ages, seq.int(16, 66, 10))
grouped_ages
head(grouped_ages)
table(grouped_ages)
?cut
table(grouped_ages)
# test cut()
cut(c(11, 22, 23,34,55,62), seq.int(10,70, 10))
class(cut(c(11, 22, 23,34,55,62), seq.int(10,70, 10)))
class(ages)
class(grouped_ages)
# processing dirty data
dirty <- data.frame(x = c("1.23","4..56", "7.89"))
dirty
class(dirty)
class(dirty$x)
as.numeric(dirty$x)
class(dirty$x)   # it is factor type
as.numeric(dirty$x)
class(dirty$x)   # it is factor type
not_dirty <- as.numeric(dirty$x)
not_dirty
as.character(dirty$x)
as.numeric(as.character(dirty$x))
as.character(dirty$x)
as.numeric(as.character(dirty$x))
as.integer(dirty$x)
levels(dirty$x)
as.numeric(levels(dirty$x))
not_dirty <- as.numeric(dirty$x)
not_dirty
# E7-2
x <- c(
"Swan swam over the pond, Swim swan swim!",
"Swan swam back again - Well swum swan!"
)
strsplit(x, ",? -? ?")
# E7-3
three_d6 <- function(n)
{
random_numbers <- matrix(
sample(6, 3 * n, replace = TRUE),
nrow = 3
)
colSums(random_numbers)
}
rt <- c(three_d6(1000))
rt
unique(rt)
unique(rt)
table(rt)
t <-cut(rt, c(2,3,5,8,12,15,17,18))
t <-cut(rt, c(2,3,5,8,12,15,17,18), labels = -3:3)
table(t)
t <-cut(rt, c(2,3,5,8,12,15,17,18))
table(t)
t
table(t)
t <-cut(rt, c(2,3,5,8,12,15,17,18))
table(t)
while(action != "Win heart of Andie McDowell"){
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
}
# while loop
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
while(action != "Win heart of Andie McDowell"){
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
message("action = ", action)
}
# use next (skip current loop and go to next one)
repeat{
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
if(action == "Rob a bank")  {
message("Quietly skipping to the next iteration")
next
}
message("action = ", action)
if(action == "Win heart of Andie McDowell") break
}
# use next (skip current loop and go to next one)
repeat{
message("Happy Groundhog Day!")
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
if(action == "Rob a bank")  {
message("Quietly skipping to the next iteration")
next
}
message("action = ", action)
if(action == "Win heart of Andie McDowell") break
}
for (i in sea_shells){
print(sprintf("%s has %d words", i, nchar(i)))
}
# E8-3
sea_shells <- c(
"She", "sells", "sea", "shells", "by", "the", "seashore",
"The", "shells", "she", "sells", "are", "surely", "seashells",
"So", "if", "she", "sells", "shells", "on", "the", "seashore",
"I'm", "sure", "she", "sells", "seashore", "shells"
)
for (i in sea_shells){
print(sprintf("%s has %d words", i, nchar(i)))
}
charNumber <- nchar(sea_shells)
charNumber
for (i in min(charNumber):max(charNumber)){
print(sprintf("%d letter words: %s", i, toString(unique(sea_shells[charNumber == i]))))
}
sea_shells[charNumber == 1]
sea_shells[charNumber == 6]
charNumber == 6
setwd("C:/Users/Skuller/R/LearningR/ch09")
# source() and dir()
r_files <- dir(pattern = "\\.r$")
r_files
# source() and dir()
r_files <- dir(pattern = "\\.r$")
r_files
lapply(r_files, source)
?source
globalenv()
eapply(globalenv, print)
genv <- globalenv()
eapply(genv, print)
##Instant Vectorization
# vectorize()
baby_gender_report <- function(gender){
switch(
gender,
male = "It's a boy!",
female = "It's a girl!",
"Um..."
)}
# doing this will throw an error, function require a scalar input,
# but we input a vector
genders <- c("male", "female", "other")
baby_gender_report(genders)
# an easy way to use vectorize function
vectorized_baby_gender_report <- Vectorize(baby_gender_report)
vectorized_baby_gender_report(genders)
?with
## Excercises
# E9-1
wayans <- list(
"Dwayne Kim" = list(),
"Keenen Ivory" = list(
"Jolie Ivory Imani",
"Nala",
"Keenen Ivory Jr",
"Bella",
"Daphne Ivory"
),
Damon = list(
"Damon Jr",
"Michael",
"Cara Mia",
"Kyla"
),
Kim = list(),
Shawn = list(
"Laila",
"Illia",
"Marlon"
),
Marlon = list(
"Shawn Howell",
"Arnai Zachary"
),
Nadia = list(),
Elvira = list(
"Damien",
"Chaunté"
),
Diedre = list(
"Craig",
"Gregg",
"Summer",
"Justin",
"Jamel"
),
Vonnie = list()
)
wayans
# how many children in first generation
NROW(wayans)
# how many childre of each member of first generation
lapply(wayans, NROW)
vapply(wayans, length, integer(1))
vapply(wayans, NROW, integer(1))
# E9-2
state.x77
# best answer
apply(state.x77, 2, mean)
apply(state.x77, 2, sd)
summary((state.x77))
with(commute_data, tapply(time, mode, quantile, prob =0.75))
# E9-3
time_for_commute
commute_times <- replicate(1000, time_for_commute())
commute_data <- data.frame(
time = commute_times,
mode = names(commute_times)
)
commute_data
lapply(commute_data, unique)
with(commute_data, tapply(time, mode, quantile, prob =0.75))
