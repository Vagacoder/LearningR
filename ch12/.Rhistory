# require function, return TRUE or FALSE when it loads package
if(!require(apackagethatmightnotbeinstalled)){
warning("The package 'apackagethatmightnotbeinstalled'
is not available.")}
## check installed packages
# search()
search()
# installed.packges
View(installed.packages())
# find location of library coming with R
R.home("library")
.Library
# find your home directory
path.expand("~")
Sys.getenv("HOME")
# if there are multiple library, use .libpaths function to list all
.libPaths()
## How to install package
# access additional repository
setRepositories()
install.packages("xts")
# from github need devtools package
install.packages("devtools")
library(devtools)
install_github("knitr", "yihui")
## update packages
update.packages(ask = FALSE)
# lapply(packageList[,"LibPath"], rowSums)
table(packageList[,"LibPath"])
View(installed.packages)
View(installed.packages())
## Chapter 11
# Data and times
library(lubridate)
## Chapter 11
# Data and times
install.packages("lubridate")
## Chapter 11
# Data and times
install.packages("lubridate")
library(lubridate)
View(installed.packages())
# POSIX dates and times
Sys.time()
# POSIX dates and times
(now_ct <- Sys.time())
class(noew_ct)
class(now_ct)
unclass(now_ct)
(now_lt <- as.POSIXlt(now_ct))
class(now_lt)
unclass(now_lt)
# using index to acces each elemetn in POSIXlt
now_lt$sec
now_lt[["min"]]
now_lt[["zone"]]
now_lt[['min']]
now_lt[[min]]
now_lt$min
now_lt[["min"]]
# using index to acces each elemetn in POSIXlt
now_lt
now_lt["min"]
# using index to acces each elemetn in POSIXlt
now_lt
unclass(now_lt)
now_lt["min"]
now_lt[["zone"]]
# date class
(now_date <- as.Date(now_ct))
class(now_date)
unclass(now_date)
## parse the date and time from and to string
# strptime()
moon_landings_str <- c(
"20:17:40 20/07/1969",
"06:54:35 19/11/1969",
"09:18:11 05/02/1971",
"22:16:29 30/07/1971",
"02:23:35 21/04/1972",
"19:54:57 11/12/1972"
)
(moon_landings_lt <- strptime(
moon_landings_str,
"%H:%M:%S %d/%m/%Y",
tz = "UTC"
))
# if format does not match, will return NA
strptime(
moon_landings_str,
"%H:%M:%S %d-%m-%Y",
tz = "UTC"
)
# if format does not match, will return NA
strptime(
moon_landings_str,
"%H:%M:%S %d/%m-%Y",
tz = "UTC"
)
# if format does not match, will return NA
strptime(
moon_landings_str,
"%H:%M:%S %d/%m/%Y",
tz = "UTC"
)
## formatting dates
# strftime()
strftime(now_ct, "It's %I:%M%p on %A %d %B, %Y.")
strftime(now_ct, "It's %H:%M%p on %A %d %B, %Y.")
strftime(now_ct, "It's %H:%M%p on %A %d %m, %Y.")
## time zone
# default time zone
Sys.timezone()
Sys.getlocale()
Sys.getlocale("LC_TIME")
# use Olson form
steftime(now_ct, tz = "America/Los_Angeles")
# use Olson form
strftime(now_ct, tz = "America/Los_Angeles")
strftime(now_ct, tz = "Africa/Brazzaville")
strftime(now_ct, tz = "Asia/Kolkata")
zone.tab
file.path(R.home("share"),"zoneinfo", "zone.tab")
(file.path(R.home("share"),"zoneinfo", "zone.tab"))
# manual offset from UTC
strftime(now_ct, tz = "")
strftime(now_ct, tz = "UTC")
strftime(now_ct, tz = "UTC-5")
strftime(now_ct, tz = "GMT-5")
strftime(now_ct, tz = "-5")
#
strftime(now_ct, tz = "EST")
strftime(now_ct, tz = "PST8PDT")
strftime(now_ct, tz = "PST")
strftime(now_ct, tz = "PST8PDT")
strftime(now_ct, tz = "PDT")
strftime(now_ct, tz = "PST")
strftime(now_ct, tz = "PST8PDT")
# using abbreviation
strftime(now_ct, tz = "EST")
strftime(now_ct, tz = "Asia/Tokyo")
now_lt
strftime(now_lt, tz = "Asia/Tokyo")
strftime(as.POSIXct(now_lt), tz = "Asia/Tokyo")
## Arithmetic on dates and times
now_ct + 86400
now_ct
now_lt
now_lt + 86400
now_date
now_date + 1
the_start_of_time <- as.Date("1970-01-01")
(the_start_of_time <- as.Date("1970-01-01"))
(the_end_of_time <- as.Date("2012-12-21"))
(all_time <- the_end_time - the_start_of_time)
(all_time <- the_end_of_time - the_start_of_time)
class(all_time)
unclass(all_time)
difftime(the_end_of_time, the_start_of_time, units = "secs")
difftime(the_end_of_time, the_start_of_time, units = "weeks")
seq(the_start_of_time, the_end_of_time, by = "1 year")
seq(the_start_of_time, the_end_of_time, by = "500 days")
methods(class = "POSIXt")
methods(class = "Date")
# lubridate package
john_harrison_birth_date <- c( #He invented the marine chronometer
"1693-03 24",
"1693/03\\24",
"Tuesday+1693.03*24"
)
ymd(john_harrison_birth_date)
# lubridate package
methods(lubridate)
# lubridate package
methods(class = "lubridate")
date_format_function <-
stamp("A moon landing occurred on Monday 01 January 1900 at 18:00:00.")
(duration_one_to_ten_years <- dyears(1:10))
?dyears
today() + duration
today() + duration_one_to_ten_years
dminutes(100)
years(10)
years(1:10)
(period_one_to_ten_years <- years(1:10))
today() + period_one_to_ten_years
# interval
a_year <- dyears(1)
as.period(a_year)
start_date <- ymd("2016-02-28")
(interval_over_leap_year <- new_interval(
start_date,
start_date + a_year
))
as.period(interval_over_leap_year)
as.period(interval_over_leap_year)
# interval operator %--% and %within%
ymd("2016-02-28") %--% ymd("2016-03-01")
ymd("2016-02-29") %within% interval_over_leap_year
ymd("2016-02-27") %within% interval_over_leap_year
ymd("2016-02-29") %within% interval_over_leap_year
# with_tz function
now_lt
with_tz(now_lt, tz = "America/Los_Angeles")
with_tz(now_lt, tz = "Africa/Brazzaville")
with_tz(now_lt, tz = "Asia/Kolkata")
with_tz(now_lt, tz = "Australia/Adelaide")
# olson_time_zones function
head(olson_time_zones())
olson_time_zones()
olson_time_zones("longitude")
# Q11-3
date()
# Q11-3
current_date <- date()
# Q11-3
current_date <- date()
strftime(current_date, "%B, %Y")
# Q11-3
current_date <- Sys.time()
strftime(current_date, "%B, %Y")
# Q11-4
(current_date + dminutes(60))
# Q11-4
curret
# Q11-4
current_date
(current_date + dminutes(60))
# Q11-5
one_date <- as.Date("2016-01-01")
one_date
one_year_duration <- dyears(1)
one_year_period <- years(1)
(one_date + one_year_duration)
(one_date + one_year_period)
(current_date + 3600)
(current_date + dminutes(60))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943--2-25"))
b_days
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943-2-25"))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943-2-25")))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07", as.Date("1940-10-09"),as.Date("1942-06-18"), as.Date("1943-2-25")))
## Exercises
# E11-1
b_days <- c(as.Date("1940-07-07"),
as.Date("1940-10-09"),
as.Date("1942-06-18"),
as.Date("1943-2-25")
)
b_days
strftime(b_days, "%B %d %m %y")
?strftime
strftime(b_days, "%a %d %B %y")
strftime(b_days, "%a %d %b %y")
?Sys.timezone
Sys.timezone(location = TRUE)
# E11-2
Sys.timezone(location = TRUE)
OlsonNames(tzdir = NULL)
# E11-3
input <- input("your B days: ")
inputDate <- c("1940-07-07", "1940-10-09","1942-06-18","1943-2-25")
inputDate <- c("1940-07-07", "1940-10-09","1942-06-18","1943-2-25")
b_days2 <- strptime(inputDate, "%Y-%m-%d")
b_days2
b_days
b_days2 <- strptime(inputDate, "%Y-%m-%d", tz = FALSE)
b_days2 <- strptime(inputDate, "%Y-%m-%d", tz = "UTC")
b_days2
strftime(b_days, "%a %d %b %y")
strftime(b_days2, "%a %d %b %y")
# 1, Build in dataset in R
data()
data(package = .packages(TRUE))
# access the data, arguments = 1, name of dataset, 2, name of package
data("kidney", package = "survival")
head(kidney)
kidney
# 2, Read the text file
# 2.1 CSV and TDF
# read.table()
# e.g. Deer skull data
install.packages("learningr")
library(learningr)
# test read file
testFile <- system.file("Z:/R/LearningR/ch11/ch11.r")
testData <- read.csv(testFile)
read.csv
read.table
testData <- read.table(testFile)
file
# e.g. crab data
crab_file <- system.file("extdata", "crabtag.csv", package = "learningr")
# notice arguments: skip and nrow.
(crab_id_block <- read.csv(
crab_file,
header = FALSE,
skip = 3,
nrow = 2
))
(crab_tag_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 8,
nrow = 5
))
(crab_lifetime_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 15,
nrow = 3
))
# write file
write.csv(
crab_lifetime_notebook, "Z:/R/crab_lifetime_data.csv",
row.names = FALSE,
fileEncoding = "utf8"
)
crab_lifetime_notebook, "Z:/R/crab_lifetime_data.csv",
row.names = FALSE,
fileEncoding = "utf8"
# write file
write.csv(
crab_lifetime_notebook, "Z:/R/crab_lifetime_data.csv",
row.names = FALSE,
fileEncoding = "utf8"
)
# 2.2 Unstructured text files
text_file <- system.file(
"extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package = "learningr"
)
the_tempest <- readLines(text_file)
the_tempest
the_tempest[1926:1927]
# 2.2 Unstructured text files
text_file <- system.file(
"extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package = "learningr"
)
the_tempest <- readLines(text_file)
the_tempest <- read(text_file)
the_tempest <- read.table(text_file)
the_tempest <- readline(text_file)
the_tempest[1926:1927]
the_tempest <- readLines(text_file)
?readLines
?system.file
# 2.2 Unstructured text files
text_file <- system.file(
"extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package = "learningr"
)
the_tempest <- readLines(text_file)
# e.g. crab data
crab_file <- system.file("extdata", "crabtag.csv", package = "learningr")
# notice arguments: skip and nrow.
(crab_id_block <- read.csv(
crab_file,
header = FALSE,
skip = 3,
nrow = 2
))
# 2.3 XML and HTML files
install.packages("XML")
library(XML)
xml_file <- system.file("extdata", "options.xml", package = "learningr")
r_options <- xmlParse(xml_file)
xml_file
r_options
xmlParse(xml_file, useInternalNodes = FALSE)
xmlTreeParse(xml_file)
xpathSApply(r_options, "//variable[contains(@name, 'warn')]")
?xpathSApply
# serializing objects
library(Runiversal)
# serializing objects
install.packages("Runiversal")
library(Runiversal)
ops <- as.list(options())
cat(makexml(ops), file = "options.xml")
setwd("~/R/LearningR/ch12")
# 3. JSON and YAML files
library(RJSONIO)
library(rjson)
# 3. JSON and YAML files
install.packages("RJSONIO")
install.packages("rjson")
library(RJSONIO)
library(rjson)
jamaican_city_file <- system.file(
"extdata",
"Jamaican Cities.json",
package = "learningr"
)
(jamaican_cities_RJSONIO <- RJSONIO::fromJSON(jamaican_city_file))
(jamaican_cities_rjson <- rjson::fromJSON(file = jamaican_city_file))
jamaican_city_file
jamaican_city_file
jamaican_city_file <- system.file(
"Jamaican Cities.json",
"extdata",
package = "learningr"
)
jamaican_city_file
?system.file
jamaican_city_file <- system.file(
"extdata",
"Jamaican.Cities.json",
package = "learningr"
)
jamaican_city_file
# :: define from which pkg the function should be used
(jamaican_cities_RJSONIO <- RJSONIO::fromJSON(jamaican_city_file))
(jamaican_cities_rjson <- rjson::fromJSON(file = jamaican_city_file))
# using internal nodes
xml_file <- system.file("extdata", "options.xml", package = "learningr")
xml_file
r_options <- xmlParse(xml_file)
r_options
# 2.2 Unstructured text files
text_file <- system.file(
"extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package = "learningr"
)
text_file
# 2.2 Unstructured text files
text_file <- system.file(
"extdata",
"Shakespeare.s.The.Tempest..from.Project.Gutenberg.pg2235.txt",
package = "learningr"
)
text_file
the_tempest <- readLines(text_file)
the_tempest
the_tempest[1926:1927]
# 2 pkg deal with NaN and NA
special_numbers <- c(NaN, NA, Inf, -Inf)
RJSONIO::toJSON(special_numbers)
# rjson turn everything to string
rjson::toJSON(special_numbers)
# YAML package
library(yaml)
yaml.load_file(jamaican_city_file)
# 4. Read binary file
# Excel file
library(xlsx)
bike_file <- system.file(
"extdata",
"Alpe d'Huez.xls",
package = "learningr"
)
bike_file
bike_file <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bike_file
bike_data <- read.xlsx2(
bike_file,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
# 4. Read binary file
# Excel file
library(xlsx)
# 4. Read binary file
# Excel file
install.packages("xlsx")
bike_data <- read.xlsx2(
bike_file,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
library(xlsx)
bike_data <- read.xlsx2(
bike_file,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bike_data)
