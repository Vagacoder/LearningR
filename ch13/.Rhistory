crab_file <- system.file("extdata", "crabtag.csv", package = "learningr")
(crab_id_block <- read.csv(
crab_file,
header = FALSE,
skip = 3,
nrow = 2
))
(crab_tag_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 8,
nrow = 5
))
(crab_lifetime_notebook <- read.csv(
crab_file,
header = FALSE,
skip = 15,
nrow = 3
))
# test read file
testFile <- system.file("C:/Users/Skuller/R/LearningR/ch12/ch12.r")
testData <- read.table(testFile, header = TRUE, fill = TRUE)
# test read file
testFile <- system.file("C:/Users/Skuller/R/LearningR/ch11/ch11.r")
testData <- read(testFile)
testData <- read.csv(testFile)
## Quiz
# Q12-1
data()
data(package = .packages(TRUE))
library(learningr)
## Exercises
# E12-1
read.csv("extdata", "hafu.csv", package = "learningr")
hafuData <- read.csv(hafuFile)
## Exercises
# E12-1
hafuFile <- system.file("extdata", "hafu.csv", package = "learningr")
hafuData <- read.csv(hafuFile)
head(hafuData)
hafuData
# E12-2
infectionFile <- system.file("extdata",
"multi.drug.resistant.gonorrhoea.infection.xls", package = "learningr")
infectionData <- read.xlsx2(infectionFile)
# E12-2
library(xlsx)
infectionData <- read.xlsx2(infectionFile)
?read.xlsx2
infectionData <- read.xlsx2(infectionFile, 1)
infectionData
infectionData <- read.xlsx2(infectionFile, 1, colClasses = "")
infectionData
infectionData <- read.xlsx2(infectionFile, 1, colClasses = "")
infectionData <- read.xlsx2(infectionFile, 1, colClasses = C(""))
infectionData <- read.xlsx2(infectionFile, 1, colClasses = C("integer", "character", "character", "numeric"))
infectionData <- read.xlsx2(infectionFile, sheetIndex = 1,
colClasses = C("integer", "character", "character", "numeric"))
infectionData <- read.xlsx2(infectionFile, 1,
colClasses = C("integer", "character", "character", "numeric"))
infectionData <- read.xlsx2(infectionFile, 1,
#colClasses = C("integer", "character", "character", "numeric")
)
infectionData
# E12-3
library(DBI)
library(RSQLite)
SQLiteDriver <- dbDriver(type = "SQLite")
SQLiteDriver <- dbDriver("SQLite")
daylongFile <- system.file("extdata", "crabtag.sqlite", package = "learningr")
conn <- dbConnect(SQLiteDriver, daylongFile)
dbReadTable(conn, "Daylog")
head(dbReadTable(conn, "Daylog"))
query <- "SELECT * FROM Daylog"
head(daylog <- dbGetQuery(conn, query))
dbDisconnect(conn)
dbUnloadDriver(SQLiteDriver)
alpe_data <- read.xlsx2(alpe)
alpe <- system.file("extdata", "Alpe.d.Huez.xls", "learningr")
alpe_data <- read.xlsx2(alpe)
alpe_data <- read.xlsx2(alpe, 1)
alpe <- system.file("extdata", "Alpe.d.Huez.xls", "learningr")
alpe_data <- read.xlsx2(alpe, 1)
alpe_data <- read.xlsx2(alpe, 1)
# clean string
# turn "Y"/"N" to TRUE/FALSE
library(xlsx)
yn_to_logical <- function(x){
y <- rep.int(NA, length(x))
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
y
}
alpe <- system.file("extdata", "Alpe.d.Huez.xls", "learningr")
alpe_data <- read.xlsx2(alpe, 1)
alpe_data <- read.xlsx2(alpe, sheet = 1)
bike_file <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bike_file
# coClasses is optional, helping to set data type.
bike_data <- read.xlsx2(
bike_file,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bike_data)
alpe <- system.file("extdata", "Alpe.d.Huez.xls", "learningr")
alpe_data <- read.xlsx2(alpe, sheet = 1)
alpe
alpe <- system.file("extdata", "Alpe.d.Huez.xls", "learningr")
alpe
alpe <- system.file("extdata", "Alpe.d.Huez.xls", package = "learningr")
alpe
alpe_data <- read.xlsx2(alpe, sheet = 1)
alpe_data <- read.xlsx2(alpe, 1)
alpe_data <- read.xlsx2(alpe, sheetIndex = 1, startRow =2)
alpe_data
alpe_data$DrugUse <- yn_to_logical(alpe$DrugUse)
alpe_data$DrugUse <- yn_to_logical(alpe_data$DrugUse)
alpe_data
alpe_data <- read.xlsx2(alpe, sheetIndex = 1, startRow =2)
alpe_data
alpe
alpe_data <- read.xlsx2(alpe, sheetIndex = 1, startRow =2)
alpe_data
alpe_data$DrugUse <- yn_to_logical(alpe_data$DrugUse)
alpe_data
# e.g.
data(english_monarchs, package = "learningr")
head(english_monarchs)
library(stringr)
multiple_kingdoms <- str_detect(english_monarchs$domain, fixed(","))
english_monarchs[multiple_kingdoms, c("name", "domain")]
# pipe character "|" means boolean "or"
multiple_rulers <- str_detect(english_monarchs$name, ",|and")
english_monarchs$name[multiple_rulers & !is.na(multiple_rulers)]
multiple_rulers
english_monarchs$name[multiple_rulers]
# exclude the NA from the vector
english_monarchs$name[multiple_rulers]
# clean string
# turn "Y"/"N" to TRUE/FALSE
library(xlsx)
yn_to_logical <- function(x){
y <- rep.int(NA, length(x))
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
y
}
## e.g. English_monarchs
data(english_monarchs, package = "learningr")
head(english_monarchs)
library(stringr)
# fixed() means exact string, not a regex
multiple_kingdoms <- str_detect(english_monarchs$domain, fixed(","))
english_monarchs[multiple_kingdoms, c("name", "domain")]
# pipe character "|" means boolean "or", return a vector of boolean
multiple_rulers <- str_detect(english_monarchs$name, ",|and")
multiple_rulers
# exclude the NA from the vector
english_monarchs$name[multiple_rulers]
english_monarchs$name[multiple_rulers & !is.na(multiple_rulers)]
# exclude the NA from the vector
english_monarchs$name[multiple_rulers]
# exclude the NA from the vector
english_monarchs$name[multiple_rulers]
# string split
str_split(english_monarchs$name[multiple_rulers])
?str_split
# string split
str_split(english_monarchs$name[multiple_rulers], " ")
# string split
str_split(english_monarchs$name[multiple_rulers], ", ?")
# string split
str_split(english_monarchs$name[multiple_rulers], ", ?")
individual_rulers <- str_split(english_monarchs$name, ", | and ")
individual_rulers
# character count
th <- c("th", "ð", "þ")
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
# character count
th <- c("th", "Æ", "þ")
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
individual_rulers <- str_split(english_monarchs$name, ", | and ")
individual_rulers
head(english_monarchs)
# character count
th <- c("R<U+00E6>", "Æ", "þ")
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
# character count
th <- c("R<U+00E6>", "Æ", "a")
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
english_monarchs[multiple_kingdoms, c("name", "domain")]
# character count
th <- c("<U+00E6>", "<U+00C6>", "a")
th
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
# character count
th <- c("<U+00E6>", "<U+00C6>", "Ecgbehrt")
th
sapply(th, function(th){sum(str_count(english_monarchs$name, th))})
# character count
th <- c("<U+00E6>", "<U+00C6>", "Offa")
th
sapply(th, function(x){sum(str_count(english_monarchs$name, x))})
str_count(english_monarchs$name, "Offa")
sum(str_count(english_monarchs$name, "Offa"))
?summary.aov
?sum
sum(str_count(english_monarchs$name, "Offa"), na.rm = FALSE)
sum(str_count(english_monarchs$name, "Offa"), na.rm = FALSE)
sum(str_count(english_monarchs$name, "Offa"), na.rm = TRUE)
sapply(th, function(x){sum(str_count(english_monarchs$name, x), na.rm = TRUE)})
# character count
th <- c("th", "ð", "þ")
th
str_count(english_monarchs$name, "Offa")
sum(str_count(english_monarchs$name, "Offa"), na.rm = TRUE)
sapply(th, function(x){sum(str_count(english_monarchs$name, x), na.rm = TRUE)})
# replace character
english_monarchs$new_name <- str_replace_all(english_monarchs$name, "[ðþ]", "th")
english_monarchs$new_name
# unify all variant low- and upper-case string
gender <- c("MALE", "Male", "male", "M", "FEMALE",
"Female", "female", "f", NA)
clean_gender <- str_replace(gender, ignore.case("^m(ale)?$"),  "Male")
clean_gender <- str_replace(gender, ignore.case("^m(ale)?$"), "Male")
?ignore.case
??ignore.case
??ignore
?str_replace
pattern <- "a.b"
strings <- c("ABB", "aaB", "aab")
str_detect(strings, pattern)
str_detect(strings, ignore.case(pattern)
)
pattern <- "a.b"
strings <- c("ABB", "aaB", "aab")
str_detect(strings, pattern)
str_detect(strings, ignore.case(pattern))
# unify all variant low- and upper-case string
library(plyr)
gender <- c("MALE", "Male", "male", "M", "FEMALE",
"Female", "female", "f", NA)
clean_gender <- str_replace(gender, ignore.case("^m(ale)?$"), "Male")
clean_gender <- str_replace(gender, ignore.case = "^m(ale)?$", "Male")
clean_gender <- str_replace(gender, "^m(ale)?$", "Male")
(clean_gender <- str_replace(clean_gender, "^f(emale)?$", "Female"))
(clean_gender <- str_replace(clean_gender, "^f(emale)?$" ignore.case = TRUE, "Female"))
(clean_gender <- str_replace(clean_gender, fixed("^f(emale)?$" ignore.case = TRUE), "Female"))
(clean_gender <- str_replace(clean_gender, fixed("^f(emale)?$", ignore.case = TRUE), "Female"))
(clean_gender <- str_replace(clean_gender, fixed("^f(emale)?$", ignore_case = TRUE), "Female"))
clean_gender <- str_replace(gender, fixed("^m(ale)?$", ignore_case = TRUE), "Male")
(clean_gender <- str_replace(clean_gender, fixed("^f(emale)?$", ignore_case = TRUE), "Female"))
gender <- c("MALE", "Male", "male", "M", "FEMALE",
"Female", "female", "f", NA)
clean_gender <- str_replace(gender, fixed("^m(ale)?$", ignore_case = TRUE), "Male")
(clean_gender <- str_replace(clean_gender, fixed("^f(emale)?$", ignore_case = TRUE), "Female"))
(clean_gender <- str_replace(clean_gender, grep("^f(emale)?$", ignore_case = TRUE), "Female"))
?grep
(clean_gender <- str_replace(clean_gender, grep("^f(emale)?$", ignore.case = TRUE), "Female"))
clean_gender
clean_gender <- str_replace(gender, grep("^m(ale)?$", ignore.case = TRUE), "Male")
clean_gender <- str_replace(gender, grep("^m(ale)?$", gender, ignore.case = TRUE), "Male")
gender
?str_replace
clean_gender <- str_replace(gender, grep("^m(ale)?$", gender, ignore.case = TRUE), "Male")
clean_gender <- str_replace(gender, grep("^m(ale)?$", gender), "Male")
clean_gender <- str_replace(gender, ignore.case("^m(ale)?$"), "Male")
gender <- c("MALE", "Male", "male", "M", "FEMALE",
"Female", "female", "f", NA)
gender
clean_gender <- str_replace(gender, "^m(ale)?$", "Male")
clean_gender
clean_gender <- str_replace(gender, "(?i)^m(ale)?$(?-i)", "Male")
clean_gender
clean_gender <- str_replace(clean_gender, "(?i)^f(emale)?$(?-i)", "Female")
clean_gender
# 2. Manipulate Data Frame
# add/ replace columns (using indexing and subset)
head(english_monarchs)
head(english_monarchs)
english_monarchs$length.of.reign.years <-
english_monarchs$end.of.reign - english_monarchs$start.of.reign
head(english_monarchs)
# add/ replace columns (using with function)
english_monarchs$length.of.reign.years <- with(
english_monarchs,
end.of.reign - start.of.reign
)
head(english_monarchs)
# useful when changing more columns
english_monarchs <- within(  english_monarchs,
{ length.of.reign.years <- end.of.reign - start.of.reign
reign.was.more.than.30.years <- length.of.reign.years > 30
}
)
head(english_monarchs)
# mutate function
english_monarchs <- mutate( english_monarchs,
length.of.reign.years = end.of.reign - start.of.reign,
reign.was.more.than.30.years = length.of.reign.years > 30
)
head(english_monarchs)
# Dealing with Missing Data
data("deer_endocranial_volume", package = "learningr")
has_all_measurements <- complete.cases(deer_endocranial_volume)
deer_endocranial_volume[has_all_measurements, ]
deer_endocranial_volume
# na.omit function is shortcut of complete.cases + indexing
na.omit(deer_endocranial_volume)
# na.fail() throw an error if there is NA
na.fail(deer_endocranial_volume)
# Converting Between wide and long form
deer_wide <- deer_endocranial_volume[, 1:5]
deer_wide
# reshape2 pkg
library(reshape2)
deer_long <- melt(deer_wide, id.vars = "SkullID")
head(deer_long)
melt(deer_wide, measure.vars = c("VolCT", "VolBead", "VolLWH", "VolFinarelli"))
# dcast function
deer_wide_again <- dcast(deer_long, SkullID ~ variable)
deer_w
deer_wide_again
deer_endocranial_volume
setwd("C:/Users/Skuller/R/LearningR/ch13")
# clean string
# turn "Y"/"N" to TRUE/FALSE
library(xlsx)
library(stringr)
# Dealing with Missing Data
data("deer_endocranial_volume", package = "learningr")
# all data
deer_endocranial_volume
# find entries which have all data
# complete.cases function return a vector showing
# which row is free of NA
has_all_measurements <- complete.cases(deer_endocranial_volume)
deer_endocranial_volume[has_all_measurements, ]
# na.omit function is shortcut of complete.cases + indexing
na.omit(deer_endocranial_volume)
# na.fail() throw an error if there is NA
na.fail(deer_endocranial_volume)
# Converting Between wide and long form
deer_wide <- deer_endocranial_volume[, 1:5]
deer_wide
# reshape2 pkg
library(reshape2)
deer_long <- melt(deer_wide, id.vars = "SkullID")
head(deer_long)
?melt
# dcast function from long to wide
deer_wide_again <- dcast(deer_long, SkullID ~ variable)
deer_wide_again
# notice that data frame from dcast function above, is sorted by SkullID
deer_endocranial_volume
class(deer_wide_again)
# acast return a vector/matrix/array
deer_wide_again1 <- dcast(deer_long, SkullID ~ variable)
deer_wide_again1
class(deer_wide_again1)
# acast return a vector/matrix/array
deer_wide_again1 <- acast(deer_long, SkullID ~ variable)
deer_wide_again1
class(deer_wide_again1)
# using SQL
install.packages("sqldf")
library(sqldf)
# using SQL
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
library(RSQLite)
library(sqldf)
library(DBI)
# get subset from SQL file
subset(deer_endocranial_volume,
VolCT > 400 | VolCT2 > 400,
c(VolCT, VolCT2)
)
query <-  "SELECT VolCT, VolCT2
FROM
deer_endocranial_volume
WHERE
VolCT > 400 OR
VolCT2 > 400"
sqldf(query)
# 3. Sorting
x <- c(2, 32, 4, 16, 8)
sort(x)
sort
sort(x, decreasing = TRUE)
?Comparison
sort(c("I", "shot", "the", "city", "sheriff"))
order(x)
x[order(x)]
# 3. Sorting
x <- c(2, 32, 4, 16, 8)
order(x)
## e.g. English_monarchs
data(english_monarchs, package = "learningr")
## order() is useful for data frame,
# while sort() cannot be directly used in data frame
year_order <- order(english_monarchs$start.of.reign)
english_monarchs[year_order, ]
year_order
# arrange function form plyr pkg
arrange(english_monarchs, start.of.reign)
# arrange function form plyr pkg
library(plyr)
arrange(english_monarchs, start.of.reign)
# rank function
(x <- sample(3, 7, replace = TRUE))
rank(x)
?rank
rank(x, ties.method = "first")
# 4. Functional Programming
# Negate() returns a reversed boolean value
ct2 <- deer_endocranial_volume$VolCT2
isnt.na <- Negate(is.na)
identical(isnt.na(ct2), !is.na(ct2))
# filter()
Filter(isnt.na, ct2)
# position()
Position(isnt.na, ct2)
# Map()
get_volume <- function(ct, bead, lwh, finarelli, ct2, bead2, lwh2){
#If there is a second measurement, take the average
if(!is.na(ct2)){
ct <- (ct + ct2) / 2
bead <- (bead + bead2) / 2
lwh <- (lwh + lwh2) / 2
}
#Divide lwh by 4 to bring it in line with other measurements
c(ct = ct, bead = bead, lwh.4 = lwh / 4, finarelli = finarelli)
}
measurements_by_deer <- with(
deer_endocranial_volume,
Map(
get_volume,
VolCT,
VolBead,
VolLWH,
VolFinarelli,
VolCT2,
VolBead2,
VolLWH2
)
)
head(measurements_by_deer)
# reduce()
Reduce("+", list(1, 2, 3, 4, 5))
pmax2 <- function(x, y) ifelse(x >= y, x, y)
Reduce(pmax2, measurements_by_deer)
## e.g. English_monarchs
data(english_monarchs, package = "learningr")
## Quiz
# Q13-1
data(english_monarchs, package = "learningr")
## Quiz
# Q13-1
shake <- system.file("extdata", "Shakespeare.s.The.Tempest..from.Project.Gutenberg.pg2235.txt", package = "learningr")
str_count(shake, "thou")
library(stringr)
str_count(shake, "thou")
str_count(shake_words, "thou")
shake_words <- strsplit(shake, ", | ")
str_count(shake_words, "thou")
shake
shake_words
shake_lines
shake_lines <- readLines(shake)
shake_lines
shake_words <- strsplit(shake_lines, ", | ")
shake_words
str_count(shake_words, "thou")
sum(str_count(shake_words, "thou"))
## Exercises
# E13-1
hafuFile <- system.file("extdata", "hafu.csv", package = "learningr")
hafuData <- read.csv(hafuFile)
hafuData
head(hafuData)
hafu_father_uncertain <- str_detect(hafuData$Father, "?")
hafu_father_uncertain <- str_detect(hafuData$Father, "\?")
hafu_father_uncertain <- str_detect(hafuData$Father, fixed("?")
hafu_father_uncertain <- str_detect(hafuData$Father, fixed("?"))
head(hafu_father_uncertain)
hafu_mather_uncertain <- str_detect(hafuData$Mother, fixed("?"))
hafu_mother_uncertain <- str_detect(hafuData$Mother, fixed("?"))
head(hafu_mother_uncertain)
hafuData$Uncertain_Father <- hafu_father_uncertain
hafuData$Uncertain_Mother <- hafu_mother_uncertain
head(hafuData)
# 2
hafuData$Father <- str_replace(hafuData$Father, "?", "")
# 2
hafuData$Father <- str_replace(hafuData$Father, fixed("?"), "")
head(hafuData)
hafuData$Mother <- str_replace(hafuData$Mother, fixed("?"), "")
head(hafuData)
